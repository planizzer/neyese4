diff --git a/android/app/src/main/AndroidManifest.xml b/android/app/src/main/AndroidManifest.xml
index a74969f..f710399 100644
--- a/android/app/src/main/AndroidManifest.xml
+++ b/android/app/src/main/AndroidManifest.xml
@@ -1,4 +1,5 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android">
+    <uses-permission android:name="android.permission.CAMERA" />
     <application
         android:label="neyese4"
         android:name="${applicationName}"
diff --git a/android/gradle.properties b/android/gradle.properties
index f018a61..247b489 100644
--- a/android/gradle.properties
+++ b/android/gradle.properties
@@ -1,3 +1,5 @@
 org.gradle.jvmargs=-Xmx8G -XX:MaxMetaspaceSize=4G -XX:ReservedCodeCacheSize=512m -XX:+HeapDumpOnOutOfMemoryError
 android.useAndroidX=true
 android.enableJetifier=true
+# Use the JDK that is bundled with Android Studio to ensure consistency.
+org.gradle.java.home=/Applications/Android Studio.app/Contents/jbr/Contents/Home
\ No newline at end of file
diff --git a/android/gradle/wrapper/gradle-wrapper.properties b/android/gradle/wrapper/gradle-wrapper.properties
index 3acc4a6..9c5194d 100644
--- a/android/gradle/wrapper/gradle-wrapper.properties
+++ b/android/gradle/wrapper/gradle-wrapper.properties
@@ -2,4 +2,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-8.2-all.zip
\ No newline at end of file
+distributionUrl=https\://services.gradle.org/distributions/gradle-8.4-all.zip
\ No newline at end of file
diff --git a/android/settings.gradle.kts b/android/settings.gradle.kts
index 118e3f7..7a0b7ee 100644
--- a/android/settings.gradle.kts
+++ b/android/settings.gradle.kts
@@ -18,10 +18,8 @@ pluginManagement {
 
 plugins {
     id("dev.flutter.flutter-plugin-loader") version "1.0.0"
-    // Android Gradle Plugin versiyonunu 8.2.1'e çekiyoruz.
-    id("com.android.application") version "8.2.1" apply false
-    // Kotlin versiyonunu da bununla uyumlu olan 1.9.0'a çekiyoruz.
-    id("org.jetbrains.kotlin.android") version "1.9.0" apply false
+    id("com.android.application") version "8.3.2" apply false
+    id("org.jetbrains.kotlin.android") version "1.9.22" apply false
 }
 
 include(":app")
diff --git a/lib/core/api/ai_service.dart b/lib/core/api/ai_service.dart
index 55057d2..c859011 100644
--- a/lib/core/api/ai_service.dart
+++ b/lib/core/api/ai_service.dart
@@ -5,6 +5,7 @@ import 'package:google_generative_ai/google_generative_ai.dart';
 import 'package:neyese4/data/models/enriched_recipe_content.dart';
 import 'package:neyese4/data/models/recipe_detail.dart';
 import 'package:neyese4/core/config/api_keys.dart'; // Yeni import
+import 'dart:io'; // Dosya işlemleri için
 
 class AiService {
   static const String _apiKey = ApiKeys.gemini; // Yeni kullanım şekli
@@ -14,6 +15,65 @@ class AiService {
     generationConfig: GenerationConfig(responseMimeType: 'application/json'),
   );
 
+// YENİ METOT: Ürün fotoğrafını ve diğer bilgileri analiz eder
+  Future<Map<String, dynamic>> analyzeProductImage(File imageFile) async {
+    final prompt =
+        "Analyze the attached image of a food product. Your primary goal is to find a barcode. If a barcode is clearly visible, return a JSON object with only one key: 'barcode'. "
+        "If no barcode is visible, then identify the following details: 'productName', 'brand', 'category', 'quantity', 'unit', and 'expirationDate'. "
+        "For 'category', choose from this list: ['Sebze & Meyve', 'Et & Tavuk', 'Süt Ürünleri', 'Bakliyat', 'Baharatlar', 'İçecekler', 'Atıştırmalık', 'Diğer']. "
+        "For 'quantity', find the numerical value (e.g., for '500 g', extract 500). "
+        "For 'unit', find the unit of measurement and MAP IT to one of these exact values: ['adet', 'g', 'kg', 'ml', 'L', 'paket', 'dilim', 'kaşık']. For example, if you see 'gr' or 'grams', use 'g'. "
+        "For 'expirationDate', look for 'TETT' or 'SKT' and return the date in 'YYYY-MM-DD' format. "
+        "Return all found information in a single, clean JSON object. If you cannot identify a piece of information, omit its key. "
+        "Example: {\"productName\": \"Sade Yulaf Ezmesi\", \"brand\": \"Eti Lifalif\", \"category\": \"Diğer\", \"quantity\": 500, \"unit\": \"g\", \"expirationDate\": \"2025-12-21\"}.";
+
+    // Resmi byte dizisine çeviriyoruz
+    final imageBytes = await imageFile.readAsBytes();
+
+    // AI'a hem metin (prompt) hem de resmi (imageBytes) gönderiyoruz
+    final content = [
+      Content.multi([
+        TextPart(prompt),
+        DataPart('image/jpeg', imageBytes),
+      ])
+    ];
+
+    final response = await _model.generateContent(content);
+
+    if (response.text != null) {
+      print('--- VISION AI RESPONSE ---');
+      print(response.text!);
+      print('--------------------------');
+      final jsonMap = jsonDecode(response.text!) as Map<String, dynamic>;
+      // Gelen cevabı doğru tipe çeviriyoruz
+      return {
+        'productName': jsonMap['productName'] as String? ?? '',
+        'brand': jsonMap['brand'] as String? ?? '',
+      };
+    } else {
+      throw Exception('Görüntü analizinden sonuç alınamadı.');
+    }
+  }
+  // YENİ METOT: Bir liste dolusu başlığı tek seferde çevirir.
+  Future<List<String>> translateRecipeTitles(List<String> titles) async {
+    final prompt =
+        'You are a helpful translator. Take the following JSON array of English recipe titles and return a JSON array of the same size with their Turkish translations. Maintain the original order and only return the JSON array.\n\n'
+        'English Titles: ${jsonEncode(titles)}';
+
+    try {
+      final response = await _model.generateContent([Content.text(prompt)]);
+      if (response.text != null) {
+        final List<dynamic> translatedList = jsonDecode(response.text!);
+        return translatedList.map((e) => e.toString()).toList();
+      } else {
+        // Çeviri başarısız olursa orijinal başlıkları geri döndür
+        return titles;
+      }
+    } catch (e) {
+      print('Toplu başlık çevirme hatası: $e');
+      return titles; // Hata durumunda orijinalleri döndür
+    }
+  }
   // Geri kalan metodun kendisinde bir değişiklik yok.
   Future<EnrichedRecipeContent> getEnrichedRecipeContent(RecipeDetail recipe) async {
     final prompt =
@@ -26,7 +86,7 @@ class AiService {
         '- "estimated_nutrition": (object) Provide estimated values for "Kalori", "Protein", "Yağ", "Karbonhidrat".\n'
         '- "required_utensils": (array of strings) List the necessary kitchen utensils in Turkish.\n'
         '- "ingredients_tr": (array of objects) Translate the ingredients to Turkish. Each object must have "amount" (double), "unit" (string), and "name" (string).\n'
-        '- "preparation_steps": (array of objects) Rewrite instructions in Turkish. Each object must have "step_number" (integer) and "description" (string).\n'
+        '- "preparation_steps": (array of objects) Rewrite instructions in Turkish. Each object must have "step_number" (integer), "description" (string), and optionally "duration_in_seconds" (integer) if the step requires a timer.\n'
         '- "chef_tips": (array of strings) Provide 2-3 useful and creative tips in Turkish.\n\n'
         'Here is the recipe information to use:\n'
         'Title: ${recipe.title}\n'
@@ -39,6 +99,11 @@ class AiService {
       final response = await _model.generateContent([Content.text(prompt)]);
 
       if (response.text != null) {
+        // YENİ EKLENDİ: AI'dan gelen ham cevabı konsola yazdır.
+        print('--- GEMINI RAW RESPONSE ---');
+        print(response.text!);
+        print('---------------------------');
+
         final jsonMap = jsonDecode(response.text!) as Map<String, dynamic>;
         return EnrichedRecipeContent.fromJson(jsonMap);
       } else {
diff --git a/lib/data/models/kitchen_ingredient.g.dart b/lib/data/models/kitchen_ingredient.g.dart
deleted file mode 100644
index d9c3534..0000000
--- a/lib/data/models/kitchen_ingredient.g.dart
+++ /dev/null
@@ -1,41 +0,0 @@
-// GENERATED CODE - DO NOT MODIFY BY HAND
-
-part of 'kitchen_ingredient.dart';
-
-// **************************************************************************
-// TypeAdapterGenerator
-// **************************************************************************
-
-class KitchenIngredientAdapter extends TypeAdapter<KitchenIngredient> {
-  @override
-  final int typeId = 1;
-
-  @override
-  KitchenIngredient read(BinaryReader reader) {
-    final numOfFields = reader.readByte();
-    final fields = <int, dynamic>{
-      for (int i = 0; i < numOfFields; i++) reader.readByte(): reader.read(),
-    };
-    return KitchenIngredient(
-      name: fields[0] as String,
-    );
-  }
-
-  @override
-  void write(BinaryWriter writer, KitchenIngredient obj) {
-    writer
-      ..writeByte(1)
-      ..writeByte(0)
-      ..write(obj.name);
-  }
-
-  @override
-  int get hashCode => typeId.hashCode;
-
-  @override
-  bool operator ==(Object other) =>
-      identical(this, other) ||
-      other is KitchenIngredientAdapter &&
-          runtimeType == other.runtimeType &&
-          typeId == other.typeId;
-}
diff --git a/lib/data/models/pantry_item.dart b/lib/data/models/pantry_item.dart
index afd5a80..0fb908c 100644
--- a/lib/data/models/pantry_item.dart
+++ b/lib/data/models/pantry_item.dart
@@ -1,16 +1,42 @@
 import 'package:hive/hive.dart';
 
-// Bu dosyayı bir sonraki adımda build_runner ile üreteceğiz.
-part 'kitchen_ingredient.g.dart';
+part 'pantry_item.g.dart';
+
+@HiveType(typeId: 1) // Eski typeId'yi yeniden kullanabiliriz.
+class PantryItem extends HiveObject {
 
-// Her Hive nesnesi için benzersiz bir typeId belirliyoruz.
-// SavedRecipe için 0 kullanmıştık, bunun için 1 kullanıyoruz.
-@HiveType(typeId: 1)
-class KitchenIngredient extends HiveObject {
   @HiveField(0)
-  final String name;
+  final String productName;
+
+  @HiveField(1)
+  final String? brand;
+
+  @HiveField(2)
+  final double quantity;
+
+  @HiveField(3)
+  final String unit; // "g", "adet", "ml"
+
+  @HiveField(4)
+  final String category; // "Sebze & Meyve", "Süt Ürünleri" vb.
+
+  @HiveField(5)
+  final DateTime addedDate;
+
+  @HiveField(6)
+  final DateTime? expirationDate;
+
+  @HiveField(7) // YENİ ALAN
+  final String? barcode;
 
-  KitchenIngredient({
-    required this.name,
+  PantryItem({
+    required this.productName,
+    this.brand,
+    required this.quantity,
+    required this.unit,
+    required this.category,
+    required this.addedDate,
+    this.expirationDate,
+    this.barcode,
   });
-}
+}
\ No newline at end of file
diff --git a/lib/data/models/pantry_item.g.dart b/lib/data/models/pantry_item.g.dart
index 99e7697..20be51d 100644
--- a/lib/data/models/pantry_item.g.dart
+++ b/lib/data/models/pantry_item.g.dart
@@ -24,13 +24,14 @@ class PantryItemAdapter extends TypeAdapter<PantryItem> {
       category: fields[4] as String,
       addedDate: fields[5] as DateTime,
       expirationDate: fields[6] as DateTime?,
+      barcode: fields[7] as String?,
     );
   }
 
   @override
   void write(BinaryWriter writer, PantryItem obj) {
     writer
-      ..writeByte(7)
+      ..writeByte(8)
       ..writeByte(0)
       ..write(obj.productName)
       ..writeByte(1)
@@ -44,7 +45,9 @@ class PantryItemAdapter extends TypeAdapter<PantryItem> {
       ..writeByte(5)
       ..write(obj.addedDate)
       ..writeByte(6)
-      ..write(obj.expirationDate);
+      ..write(obj.expirationDate)
+      ..writeByte(7)
+      ..write(obj.barcode);
   }
 
   @override
diff --git a/lib/data/models/preparation_step.dart b/lib/data/models/preparation_step.dart
index 73fec83..bb15381 100644
--- a/lib/data/models/preparation_step.dart
+++ b/lib/data/models/preparation_step.dart
@@ -1,22 +1,22 @@
-// lib/data/models/preparation_step.dart
-
 class PreparationStep {
   final int stepNumber;
   final String description;
   final String? videoPrompt;
+  final int? durationInSeconds; // YENİ: Saniye cinsinden süre
 
   PreparationStep({
     required this.stepNumber,
     required this.description,
     this.videoPrompt,
+    this.durationInSeconds, // YENİ
   });
 
-  // YENİ EKLENDİ: fromJson metodu
   factory PreparationStep.fromJson(Map<String, dynamic> json) {
     return PreparationStep(
       stepNumber: json['step_number'] as int? ?? 0,
       description: json['description'] as String? ?? 'Adım açıklaması yok.',
       videoPrompt: json['video_prompt'] as String?,
+      durationInSeconds: json['duration_in_seconds'] as int?, // YENİ
     );
   }
 }
\ No newline at end of file
diff --git a/lib/data/providers.dart b/lib/data/providers.dart
index f2530d4..7150364 100644
--- a/lib/data/providers.dart
+++ b/lib/data/providers.dart
@@ -1,47 +1,53 @@
+// lib/data/providers.dart
+
 import 'package:dio/dio.dart';
 import 'package:flutter_riverpod/flutter_riverpod.dart';
 import 'package:hive_flutter/hive_flutter.dart';
-import 'package:neyese4/core/api/dio_client.dart';
 import 'package:neyese4/core/api/ai_service.dart';
+import 'package:neyese4/core/api/dio_client.dart'; // dio_client importu
 import 'package:neyese4/data/models/saved_recipe.dart';
+import 'package:neyese4/data/repositories/product_repository.dart';
 import 'package:neyese4/data/repositories/recipe_repository.dart';
 import 'package:neyese4/data/repositories/saved_recipe_repository.dart';
+import 'package:neyese4/data/models/pantry_item.dart';
+import 'package:neyese4/data/repositories/pantry_repository.dart';
+
+
+// --- API PROVIDER'LARI ---
+
+final productRepositoryProvider = Provider((ref) => ProductRepository());
 
-// --- API PROVIDER'LARI (DEĞİŞİKLİK YOK) ---
-final dioClientProvider = Provider<Dio>((ref) {
-  return DioClient().dio;
+
+// GÜNCELLENDİ: Bu provider artık doğrudan Dio nesnesi yerine, DioClient sınıfının kendisini sağlar.
+// Bu sayede DioClient'ın constructor'ı doğru şekilde çağrılır.
+final dioClientProvider = Provider<DioClient>((ref) {
+  return DioClient();
 });
 
+// GÜNCELLENDİ: Bu provider artık dioClientProvider'dan DioClient'ı alır ve içindeki .dio getter'ını kullanır.
 final recipeRepositoryProvider = Provider<RecipeRepository>((ref) {
-  final dio = ref.watch(dioClientProvider);
-  return SpoonacularRecipeRepository(dio: dio);
+  final dioClient = ref.watch(dioClientProvider);
+  return SpoonacularRecipeRepository(dio: dioClient.dio);
 });
 
-// YENİ EKLENDİ: AI Servisi için Provider
 final aiServiceProvider = Provider<AiService>((ref) {
   return AiService();
 });
 
-// --- YEREL VERİTABANI (HIVE) PROVIDER'LARI (YENİ EKLENDİ) ---
+// --- YEREL VERİTABANI (HIVE) PROVIDER'LARI (Değişiklik yok) ---
+// YENİ: Akıllı Kiler (Pantry) kutusunu sağlayan provider.
+final pantryBoxProvider = Provider((ref) => Hive.box<PantryItem>(kPantryBoxName));
+
 
-// 1. SavedRecipeRepository'mizin bir örneğini oluşturan Provider.
 final savedRecipeRepositoryProvider = Provider<SavedRecipeRepository>((ref) {
   return SavedRecipeRepository();
 });
 
-// 2. Kaydedilmiş tariflerin listesini sunan Provider.
-// Bu provider, alttaki StreamProvider'ı dinleyerek her zaman güncel listeyi tutar.
 final savedRecipesListProvider = Provider<List<SavedRecipe>>((ref) {
-  // Veritabanındaki değişiklikleri dinliyoruz.
   ref.watch(savedRecipesStreamProvider);
-  // Ve en güncel listeyi repository'den alıp sunuyoruz.
   return ref.read(savedRecipeRepositoryProvider).getAllSavedRecipes();
 });
 
-
-// 3. Veritabanındaki değişiklikleri gerçek zamanlı olarak dinleyen StreamProvider.
-// Bu provider'ın ana amacı, veritabanında bir değişiklik olduğunda (ekleme/silme)
-// 'savedRecipesListProvider'ın yeniden tetiklenmesini ve güncellenmesini sağlamaktır.
-final savedRecipesStreamProvider = StreamProvider<BoxEvent>((ref) {
+final savedRecipesStreamProvider = StreamProvider.autoDispose<BoxEvent>((ref) {
   return ref.watch(savedRecipeRepositoryProvider).watchRecipes();
-});
+});
\ No newline at end of file
diff --git a/lib/data/repositories/pantry_repository.dart b/lib/data/repositories/pantry_repository.dart
index e69de29..481ebbb 100644
--- a/lib/data/repositories/pantry_repository.dart
+++ b/lib/data/repositories/pantry_repository.dart
@@ -0,0 +1,4 @@
+// lib/data/repositories/pantry_repository.dart
+
+// Veritabanı kutusunun adını tanımlıyoruz.
+const String kPantryBoxName = 'pantry_box';
\ No newline at end of file
diff --git a/lib/data/repositories/recipe_repository.dart b/lib/data/repositories/recipe_repository.dart
index a8a04b6..f90cd0b 100644
--- a/lib/data/repositories/recipe_repository.dart
+++ b/lib/data/repositories/recipe_repository.dart
@@ -3,13 +3,12 @@ import 'package:neyese4/data/models/recipe_detail.dart';
 import 'package:neyese4/data/models/recipe_suggestion.dart';
 import 'package:neyese4/data/models/user_preferences.dart';
 
+import '../../features/recipe_finder/application/search_query.dart';
+
 abstract class RecipeRepository {
   Future<List<RecipeSuggestion>> getRandomRecipes();
   Future<RecipeDetail> getRecipeDetailById(int id);
-  Future<List<RecipeSuggestion>> findRecipesByIngredients(
-      List<String> ingredients,
-      UserPreferences preferences,
-      );
+  Future<List<RecipeSuggestion>> findRecipes(SearchQuery query);
 }
 
 class SpoonacularRecipeRepository implements RecipeRepository {
@@ -54,46 +53,43 @@ class SpoonacularRecipeRepository implements RecipeRepository {
     } catch (e) { throw 'Beklenmedik bir hata oluştu: $e'; }
   }
 
-  // ARAMA FONKSİYONU TAMAMEN GÜNCELLENDİ
+  // GÜNCELLENDİ: Metodun adı ve aldığı parametreler değişti
   @override
-  Future<List<RecipeSuggestion>> findRecipesByIngredients(
-      List<String> ingredients,
-      UserPreferences preferences,
-      ) async {
-    final ingredientsString = _translateIngredients(ingredients);
-
+  Future<List<RecipeSuggestion>> findRecipes(SearchQuery query) async {
     final Map<String, dynamic> queryParameters = {
-      // DÜZELTME: Parametre adını 'includeIngredients' olarak değiştirdik.
-      'includeIngredients': ingredientsString,
       'number': 20,
     };
 
-    if (preferences.diet != null) {
-      queryParameters['diet'] = preferences.diet;
+    // Anahtar kelime ile arama
+    if (query.query != null && query.query!.isNotEmpty) {
+      queryParameters['query'] = query.query;
     }
 
-    if (preferences.intolerances != null && preferences.intolerances!.isNotEmpty) {
-      queryParameters['intolerances'] = preferences.intolerances!.join(',');
+    // Malzemelerle arama
+    if (query.ingredients != null && query.ingredients!.isNotEmpty) {
+      queryParameters['includeIngredients'] = _translateIngredients(query.ingredients!);
     }
 
-    try {
-      // DÜZELTME: API endpoint'ini '/recipes/complexSearch' olarak değiştirdik.
-      final response = await dio.get(
-        '/recipes/complexSearch',
-        queryParameters: queryParameters,
-      );
+    // Diyet, alerji ve diğer filtreler
+    if (query.diet != null) { queryParameters['diet'] = query.diet; }
+    if (query.intolerances != null && query.intolerances!.isNotEmpty) { queryParameters['intolerances'] = query.intolerances!.join(','); }
+    if (query.type != null) { queryParameters['type'] = query.type; }
+    if (query.cuisine != null) { queryParameters['cuisine'] = query.cuisine; }
+    // YENİ EKLENDİ: maxReadyTime parametresini API isteğine ekliyoruz.
+    if (query.maxReadyTime != null) {
+      queryParameters['maxReadyTime'] = query.maxReadyTime;
+    }
 
+    try {
+      final response = await dio.get('/recipes/complexSearch', queryParameters: queryParameters);
       if (response.statusCode == 200) {
-        // DÜZELTME: complexSearch'in cevabı 'results' anahtarı altındadır.
         final List<dynamic> results = response.data['results'];
         return results.map((json) => RecipeSuggestion.fromJson(json)).toList();
       } else {
         throw 'API isteği başarısız oldu: ${response.statusCode}';
       }
-    } on DioException catch (e) {
-      throw 'API isteği sırasında bir hata oluştu: $e';
     } catch (e) {
       throw 'Beklenmedik bir hata oluştu: $e';
     }
   }
-}
+}
\ No newline at end of file
diff --git a/lib/features/profile/application/xp_provider.dart b/lib/features/profile/application/xp_provider.dart
index e69de29..39314d7 100644
--- a/lib/features/profile/application/xp_provider.dart
+++ b/lib/features/profile/application/xp_provider.dart
@@ -0,0 +1,7 @@
+// lib/features/profile/application/xp_provider.dart
+
+import 'package:flutter_riverpod/flutter_riverpod.dart';
+
+// Kullanıcının toplam XP'sini tutan basit bir StateProvider.
+// Uygulama açıldığında 0'dan başlar. (Daha sonra bu Hive'da saklanabilir)
+final userXpProvider = StateProvider<int>((ref) => 0);
\ No newline at end of file
diff --git a/lib/features/recipe_finder/application/mock_recipe_data.dart b/lib/features/recipe_finder/application/mock_recipe_data.dart
index 2998de9..7643c5a 100644
--- a/lib/features/recipe_finder/application/mock_recipe_data.dart
+++ b/lib/features/recipe_finder/application/mock_recipe_data.dart
@@ -43,7 +43,8 @@ final mockEnrichedRecipeContent = EnrichedRecipeContent(
     PreparationStep(
         stepNumber: 2,
         description: "Geniş bir tavada etleri yüksek ateşte mühürleyin. Ayrı bir sos tavasında 2 yemek kaşığı tereyağını eritin ve salçayı kavurun. Az su ekleyerek sos kıvamına getirin.",
-        videoPrompt: "Close-up shot of beef strips searing in a hot pan. A separate small pan with butter melting and tomato paste being stirred in."
+        videoPrompt: "Close-up shot of beef strips searing in a hot pan. A separate small pan with butter melting and tomato paste being stirred in.",
+        durationInSeconds: 1800 // YENİ: 30 dakika = 1800 saniye
     ),
     PreparationStep(
         stepNumber: 3,
diff --git a/lib/features/recipe_finder/application/recipe_providers.dart b/lib/features/recipe_finder/application/recipe_providers.dart
index a840d68..44a7e41 100644
--- a/lib/features/recipe_finder/application/recipe_providers.dart
+++ b/lib/features/recipe_finder/application/recipe_providers.dart
@@ -7,22 +7,69 @@ import 'package:neyese4/data/models/user_preferences.dart';
 import 'package:neyese4/data/providers.dart';
 import 'package:neyese4/features/recipe_finder/application/search_query.dart';
 
-// --- ARAMA VE ÖNERİ PROVIDER'LARI (Değişiklik yok) ---
-final randomRecipesProvider = FutureProvider.autoDispose<List<RecipeSuggestion>>((ref) {
+final randomRecipesProvider = FutureProvider.autoDispose<List<RecipeSuggestion>>((ref) async {
   final recipeRepository = ref.watch(recipeRepositoryProvider);
-  return recipeRepository.getRandomRecipes();
-});
+  final aiService = ref.watch(aiServiceProvider);
+
+  // 1. Önce İngilizce başlıklarla tarifleri al
+  final originalRecipes = await recipeRepository.getRandomRecipes();
+  if (originalRecipes.isEmpty) {
+    return [];
+  }
+
+  // 2. Sadece başlıkları bir listeye topla
+  final englishTitles = originalRecipes.map((e) => e.title).toList();
+
+  // 3. Tüm başlıkları tek seferde çeviri için AI'a gönder
+  final turkishTitles = await aiService.translateRecipeTitles(englishTitles);
 
-final recipesByIngredientsProvider =
-FutureProvider.autoDispose.family<List<RecipeSuggestion>, SearchQuery>((ref, query) {
-  if (query.ingredients.isEmpty) {
-    return Future.value([]);
+  // 4. Orijinal tarif listesini, çevrilmiş başlıklarla yeni bir listeye dönüştür
+  if (originalRecipes.length == turkishTitles.length) {
+    final translatedRecipes = <RecipeSuggestion>[];
+    for (int i = 0; i < originalRecipes.length; i++) {
+      translatedRecipes.add(
+        originalRecipes[i].copyWith(title: turkishTitles[i]),
+      );
+    }
+    return translatedRecipes;
   }
+
+  // Çeviri sayısı tutmazsa, güvenli liman olarak orijinal listeyi döndür
+  return originalRecipes;
+});
+
+// GÜNCELLENDİ: Bu provider artık arama sonuçlarını da Türkçeleştiriyor.
+final searchResultsProvider =
+FutureProvider.autoDispose.family<List<RecipeSuggestion>, SearchQuery>((ref, query) async {
+
   final recipeRepository = ref.watch(recipeRepositoryProvider);
-  return recipeRepository.findRecipesByIngredients(
-    query.ingredients,
-    UserPreferences(diet: query.diet, intolerances: query.intolerances),
-  );
+  final aiService = ref.watch(aiServiceProvider);
+
+  // 1. Önce İngilizce başlıklarla arama sonuçlarını al
+  final originalRecipes = await recipeRepository.findRecipes(query);
+  if (originalRecipes.isEmpty) {
+    return [];
+  }
+
+  // 2. Sadece başlıkları bir listeye topla
+  final englishTitles = originalRecipes.map((e) => e.title).toList();
+
+  // 3. Tüm başlıkları tek seferde çeviri için AI'a gönder
+  final turkishTitles = await aiService.translateRecipeTitles(englishTitles);
+
+  // 4. Orijinal sonuçları, çevrilmiş başlıklarla yeni bir listeye dönüştür
+  if (originalRecipes.length == turkishTitles.length) {
+    final translatedRecipes = <RecipeSuggestion>[];
+    for (int i = 0; i < originalRecipes.length; i++) {
+      translatedRecipes.add(
+        originalRecipes[i].copyWith(title: turkishTitles[i]),
+      );
+    }
+    return translatedRecipes;
+  }
+
+  // Güvenli liman olarak orijinal listeyi döndür
+  return originalRecipes;
 });
 
 
@@ -65,4 +112,12 @@ final isRecipeSavedProvider = Provider.autoDispose.family<bool, int>((ref, recip
   ref.watch(savedRecipesStreamProvider);
   final repository = ref.watch(savedRecipeRepositoryProvider);
   return repository.isRecipeSaved(recipeId);
+});
+
+// YENİ: Akşam yemeği önerileri için özel bir provider
+final dinnerIdeasProvider = FutureProvider.autoDispose<List<RecipeSuggestion>>((ref) {
+  // Akşam yemeği için 'ana yemek' tipinde bir arama yapıyoruz.
+  const query = SearchQuery(type: 'main course');
+  // Mevcut arama provider'ımızı bu sabit sorguyla tetikliyoruz.
+  return ref.watch(searchResultsProvider(query).future);
 });
\ No newline at end of file
diff --git a/lib/features/recipe_finder/application/search_query.dart b/lib/features/recipe_finder/application/search_query.dart
index c631e1a..e856e45 100644
--- a/lib/features/recipe_finder/application/search_query.dart
+++ b/lib/features/recipe_finder/application/search_query.dart
@@ -1,3 +1,5 @@
+// lib/features/recipe_finder/application/search_query.dart
+
 import 'package:freezed_annotation/freezed_annotation.dart';
 
 part 'search_query.freezed.dart';
@@ -5,10 +7,12 @@ part 'search_query.freezed.dart';
 @freezed
 class SearchQuery with _$SearchQuery {
   const factory SearchQuery({
-    required List<String> ingredients,
+    String? query,
+    List<String>? ingredients,
     String? diet,
     List<String>? intolerances,
-    // YENİ EKLENDİ: Mutfak aletlerini arama kriterine ekliyoruz.
-    List<String>? equipment,
+    String? type,
+    String? cuisine,
+    int? maxReadyTime, // YENİ EKLENDİ
   }) = _SearchQuery;
-}
+}
\ No newline at end of file
diff --git a/lib/features/recipe_finder/application/search_query.freezed.dart b/lib/features/recipe_finder/application/search_query.freezed.dart
index c30bb3a..5a7bad5 100644
--- a/lib/features/recipe_finder/application/search_query.freezed.dart
+++ b/lib/features/recipe_finder/application/search_query.freezed.dart
@@ -16,11 +16,13 @@ final _privateConstructorUsedError = UnsupportedError(
 
 /// @nodoc
 mixin _$SearchQuery {
-  List<String> get ingredients => throw _privateConstructorUsedError;
+  String? get query => throw _privateConstructorUsedError;
+  List<String>? get ingredients => throw _privateConstructorUsedError;
   String? get diet => throw _privateConstructorUsedError;
-  List<String>? get intolerances =>
-      throw _privateConstructorUsedError; // YENİ EKLENDİ: Mutfak aletlerini arama kriterine ekliyoruz.
-  List<String>? get equipment => throw _privateConstructorUsedError;
+  List<String>? get intolerances => throw _privateConstructorUsedError;
+  String? get type => throw _privateConstructorUsedError;
+  String? get cuisine => throw _privateConstructorUsedError;
+  int? get maxReadyTime => throw _privateConstructorUsedError;
 
   /// Create a copy of SearchQuery
   /// with the given fields replaced by the non-null parameter values.
@@ -36,10 +38,13 @@ abstract class $SearchQueryCopyWith<$Res> {
       _$SearchQueryCopyWithImpl<$Res, SearchQuery>;
   @useResult
   $Res call(
-      {List<String> ingredients,
+      {String? query,
+      List<String>? ingredients,
       String? diet,
       List<String>? intolerances,
-      List<String>? equipment});
+      String? type,
+      String? cuisine,
+      int? maxReadyTime});
 }
 
 /// @nodoc
@@ -57,16 +62,23 @@ class _$SearchQueryCopyWithImpl<$Res, $Val extends SearchQuery>
   @pragma('vm:prefer-inline')
   @override
   $Res call({
-    Object? ingredients = null,
+    Object? query = freezed,
+    Object? ingredients = freezed,
     Object? diet = freezed,
     Object? intolerances = freezed,
-    Object? equipment = freezed,
+    Object? type = freezed,
+    Object? cuisine = freezed,
+    Object? maxReadyTime = freezed,
   }) {
     return _then(_value.copyWith(
-      ingredients: null == ingredients
+      query: freezed == query
+          ? _value.query
+          : query // ignore: cast_nullable_to_non_nullable
+              as String?,
+      ingredients: freezed == ingredients
           ? _value.ingredients
           : ingredients // ignore: cast_nullable_to_non_nullable
-              as List<String>,
+              as List<String>?,
       diet: freezed == diet
           ? _value.diet
           : diet // ignore: cast_nullable_to_non_nullable
@@ -75,10 +87,18 @@ class _$SearchQueryCopyWithImpl<$Res, $Val extends SearchQuery>
           ? _value.intolerances
           : intolerances // ignore: cast_nullable_to_non_nullable
               as List<String>?,
-      equipment: freezed == equipment
-          ? _value.equipment
-          : equipment // ignore: cast_nullable_to_non_nullable
-              as List<String>?,
+      type: freezed == type
+          ? _value.type
+          : type // ignore: cast_nullable_to_non_nullable
+              as String?,
+      cuisine: freezed == cuisine
+          ? _value.cuisine
+          : cuisine // ignore: cast_nullable_to_non_nullable
+              as String?,
+      maxReadyTime: freezed == maxReadyTime
+          ? _value.maxReadyTime
+          : maxReadyTime // ignore: cast_nullable_to_non_nullable
+              as int?,
     ) as $Val);
   }
 }
@@ -92,10 +112,13 @@ abstract class _$$SearchQueryImplCopyWith<$Res>
   @override
   @useResult
   $Res call(
-      {List<String> ingredients,
+      {String? query,
+      List<String>? ingredients,
       String? diet,
       List<String>? intolerances,
-      List<String>? equipment});
+      String? type,
+      String? cuisine,
+      int? maxReadyTime});
 }
 
 /// @nodoc
@@ -111,16 +134,23 @@ class __$$SearchQueryImplCopyWithImpl<$Res>
   @pragma('vm:prefer-inline')
   @override
   $Res call({
-    Object? ingredients = null,
+    Object? query = freezed,
+    Object? ingredients = freezed,
     Object? diet = freezed,
     Object? intolerances = freezed,
-    Object? equipment = freezed,
+    Object? type = freezed,
+    Object? cuisine = freezed,
+    Object? maxReadyTime = freezed,
   }) {
     return _then(_$SearchQueryImpl(
-      ingredients: null == ingredients
+      query: freezed == query
+          ? _value.query
+          : query // ignore: cast_nullable_to_non_nullable
+              as String?,
+      ingredients: freezed == ingredients
           ? _value._ingredients
           : ingredients // ignore: cast_nullable_to_non_nullable
-              as List<String>,
+              as List<String>?,
       diet: freezed == diet
           ? _value.diet
           : diet // ignore: cast_nullable_to_non_nullable
@@ -129,10 +159,18 @@ class __$$SearchQueryImplCopyWithImpl<$Res>
           ? _value._intolerances
           : intolerances // ignore: cast_nullable_to_non_nullable
               as List<String>?,
-      equipment: freezed == equipment
-          ? _value._equipment
-          : equipment // ignore: cast_nullable_to_non_nullable
-              as List<String>?,
+      type: freezed == type
+          ? _value.type
+          : type // ignore: cast_nullable_to_non_nullable
+              as String?,
+      cuisine: freezed == cuisine
+          ? _value.cuisine
+          : cuisine // ignore: cast_nullable_to_non_nullable
+              as String?,
+      maxReadyTime: freezed == maxReadyTime
+          ? _value.maxReadyTime
+          : maxReadyTime // ignore: cast_nullable_to_non_nullable
+              as int?,
     ));
   }
 }
@@ -141,20 +179,26 @@ class __$$SearchQueryImplCopyWithImpl<$Res>
 
 class _$SearchQueryImpl implements _SearchQuery {
   const _$SearchQueryImpl(
-      {required final List<String> ingredients,
+      {this.query,
+      final List<String>? ingredients,
       this.diet,
       final List<String>? intolerances,
-      final List<String>? equipment})
+      this.type,
+      this.cuisine,
+      this.maxReadyTime})
       : _ingredients = ingredients,
-        _intolerances = intolerances,
-        _equipment = equipment;
+        _intolerances = intolerances;
 
-  final List<String> _ingredients;
   @override
-  List<String> get ingredients {
+  final String? query;
+  final List<String>? _ingredients;
+  @override
+  List<String>? get ingredients {
+    final value = _ingredients;
+    if (value == null) return null;
     if (_ingredients is EqualUnmodifiableListView) return _ingredients;
     // ignore: implicit_dynamic_type
-    return EqualUnmodifiableListView(_ingredients);
+    return EqualUnmodifiableListView(value);
   }
 
   @override
@@ -169,21 +213,16 @@ class _$SearchQueryImpl implements _SearchQuery {
     return EqualUnmodifiableListView(value);
   }
 
-// YENİ EKLENDİ: Mutfak aletlerini arama kriterine ekliyoruz.
-  final List<String>? _equipment;
-// YENİ EKLENDİ: Mutfak aletlerini arama kriterine ekliyoruz.
   @override
-  List<String>? get equipment {
-    final value = _equipment;
-    if (value == null) return null;
-    if (_equipment is EqualUnmodifiableListView) return _equipment;
-    // ignore: implicit_dynamic_type
-    return EqualUnmodifiableListView(value);
-  }
+  final String? type;
+  @override
+  final String? cuisine;
+  @override
+  final int? maxReadyTime;
 
   @override
   String toString() {
-    return 'SearchQuery(ingredients: $ingredients, diet: $diet, intolerances: $intolerances, equipment: $equipment)';
+    return 'SearchQuery(query: $query, ingredients: $ingredients, diet: $diet, intolerances: $intolerances, type: $type, cuisine: $cuisine, maxReadyTime: $maxReadyTime)';
   }
 
   @override
@@ -191,22 +230,28 @@ class _$SearchQueryImpl implements _SearchQuery {
     return identical(this, other) ||
         (other.runtimeType == runtimeType &&
             other is _$SearchQueryImpl &&
+            (identical(other.query, query) || other.query == query) &&
             const DeepCollectionEquality()
                 .equals(other._ingredients, _ingredients) &&
             (identical(other.diet, diet) || other.diet == diet) &&
             const DeepCollectionEquality()
                 .equals(other._intolerances, _intolerances) &&
-            const DeepCollectionEquality()
-                .equals(other._equipment, _equipment));
+            (identical(other.type, type) || other.type == type) &&
+            (identical(other.cuisine, cuisine) || other.cuisine == cuisine) &&
+            (identical(other.maxReadyTime, maxReadyTime) ||
+                other.maxReadyTime == maxReadyTime));
   }
 
   @override
   int get hashCode => Object.hash(
       runtimeType,
+      query,
       const DeepCollectionEquality().hash(_ingredients),
       diet,
       const DeepCollectionEquality().hash(_intolerances),
-      const DeepCollectionEquality().hash(_equipment));
+      type,
+      cuisine,
+      maxReadyTime);
 
   /// Create a copy of SearchQuery
   /// with the given fields replaced by the non-null parameter values.
@@ -219,20 +264,28 @@ class _$SearchQueryImpl implements _SearchQuery {
 
 abstract class _SearchQuery implements SearchQuery {
   const factory _SearchQuery(
-      {required final List<String> ingredients,
+      {final String? query,
+      final List<String>? ingredients,
       final String? diet,
       final List<String>? intolerances,
-      final List<String>? equipment}) = _$SearchQueryImpl;
+      final String? type,
+      final String? cuisine,
+      final int? maxReadyTime}) = _$SearchQueryImpl;
 
   @override
-  List<String> get ingredients;
+  String? get query;
+  @override
+  List<String>? get ingredients;
   @override
   String? get diet;
   @override
-  List<String>?
-      get intolerances; // YENİ EKLENDİ: Mutfak aletlerini arama kriterine ekliyoruz.
+  List<String>? get intolerances;
+  @override
+  String? get type;
+  @override
+  String? get cuisine;
   @override
-  List<String>? get equipment;
+  int? get maxReadyTime;
 
   /// Create a copy of SearchQuery
   /// with the given fields replaced by the non-null parameter values.
diff --git a/lib/features/recipe_finder/presentation/screens/cooking_mode_screen.dart b/lib/features/recipe_finder/presentation/screens/cooking_mode_screen.dart
index e69de29..7b417de 100644
--- a/lib/features/recipe_finder/presentation/screens/cooking_mode_screen.dart
+++ b/lib/features/recipe_finder/presentation/screens/cooking_mode_screen.dart
@@ -0,0 +1,180 @@
+// lib/features/recipe_finder/presentation/screens/cooking_mode_screen.dart
+
+import 'package:flutter/material.dart';
+import 'package:flutter_riverpod/flutter_riverpod.dart'; // YENİ: Riverpod importu
+import 'package:neyese4/core/theme/app_colors.dart';
+import 'package:neyese4/core/theme/app_text_styles.dart';
+import 'package:neyese4/data/models/preparation_step.dart';
+import 'package:neyese4/features/profile/application/xp_provider.dart'; // YENİ: XP Provider importu
+import 'package:timer_count_down/timer_controller.dart';
+import 'package:timer_count_down/timer_count_down.dart';
+
+// GÜNCELLENDİ: StatefulWidget -> ConsumerStatefulWidget
+class CookingModeScreen extends ConsumerStatefulWidget {
+  final String recipeTitle;
+  final List<PreparationStep> steps;
+
+  const CookingModeScreen({
+    super.key,
+    required this.recipeTitle,
+    required this.steps,
+  });
+
+  @override
+  // GÜNCELLENDİ: State -> ConsumerState
+  ConsumerState<CookingModeScreen> createState() => _CookingModeScreenState();
+}
+
+// GÜNCELLENDİ: State -> ConsumerState
+class _CookingModeScreenState extends ConsumerState<CookingModeScreen> {
+  int _currentStepIndex = 0;
+  final CountdownController _countdownController = CountdownController(autoStart: false);
+
+  void _goToNextStep() {
+    if (_currentStepIndex < widget.steps.length - 1) {
+      // YENİ: Her adım geçildiğinde 10 XP kazan
+      ref.read(userXpProvider.notifier).state += 10;
+      ScaffoldMessenger.of(context).showSnackBar(
+        const SnackBar(content: Text('+10 XP Kazanıldı! 🎉'), duration: Duration(seconds: 1)),
+      );
+
+      setState(() {
+        _currentStepIndex++;
+        _countdownController.restart();
+        _countdownController.pause();
+      });
+    }
+  }
+
+  void _goToPreviousStep() {
+    if (_currentStepIndex > 0) {
+      setState(() {
+        _currentStepIndex--;
+        _countdownController.restart();
+        _countdownController.pause();
+      });
+    }
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    final PreparationStep currentStep = widget.steps[_currentStepIndex];
+
+    return Scaffold(
+      appBar: AppBar(
+        title: Text('${_currentStepIndex + 1}. Adım / ${widget.steps.length}'),
+        centerTitle: true,
+        leading: IconButton(
+          icon: const Icon(Icons.close),
+          onPressed: () => Navigator.of(context).pop(),
+        ),
+      ),
+      // ... body kısmı aynı ...
+      body: Padding(
+        padding: const EdgeInsets.all(16.0),
+        child: Column(
+          children: [
+            AspectRatio(
+              aspectRatio: 16 / 9,
+              child: Container(
+                decoration: BoxDecoration(
+                  color: Colors.grey.shade200,
+                  borderRadius: BorderRadius.circular(12),
+                ),
+                child: const Center(
+                  child: Icon(Icons.videocam_outlined, color: AppColors.neutralGrey, size: 48),
+                ),
+              ),
+            ),
+            const SizedBox(height: 24),
+            if (currentStep.durationInSeconds != null)
+              _buildTimerWidget(currentStep.durationInSeconds!),
+            Expanded(
+              child: SingleChildScrollView(
+                child: Padding(
+                  padding: const EdgeInsets.only(top: 16.0),
+                  child: Text(
+                    currentStep.description,
+                    style: AppTextStyles.body.copyWith(fontSize: 20, height: 1.6),
+                  ),
+                ),
+              ),
+            ),
+          ],
+        ),
+      ),
+      bottomNavigationBar: Padding(
+        padding: const EdgeInsets.all(8.0),
+        child: Row(
+          mainAxisAlignment: MainAxisAlignment.spaceBetween,
+          children: [
+            Opacity(
+              opacity: _currentStepIndex > 0 ? 1.0 : 0.0,
+              child: ElevatedButton.icon(
+                onPressed: _currentStepIndex > 0 ? _goToPreviousStep : null,
+                icon: const Icon(Icons.arrow_back),
+                label: const Text('Önceki'),
+                style: ElevatedButton.styleFrom(backgroundColor: Colors.grey.shade300),
+              ),
+            ),
+            ElevatedButton.icon(
+              onPressed: () {
+                if (_currentStepIndex == widget.steps.length - 1) {
+                  // YENİ: Tarifi bitirince 50 XP bonus kazan
+                  ref.read(userXpProvider.notifier).state += 50;
+                  ScaffoldMessenger.of(context).showSnackBar(
+                    const SnackBar(content: Text('Tarif Tamamlandı! +50 XP Bonus! 🏆'), duration: Duration(seconds: 2)),
+                  );
+                  Navigator.of(context).pop();
+                } else {
+                  _goToNextStep();
+                }
+              },
+              icon: Icon(_currentStepIndex == widget.steps.length - 1 ? Icons.check_circle : Icons.arrow_forward),
+              label: Text(_currentStepIndex == widget.steps.length - 1 ? 'Tarifi Bitir' : 'Sonraki'),
+              style: ElevatedButton.styleFrom(
+                  backgroundColor: AppColors.accent, foregroundColor: Colors.white),
+            ),
+          ],
+        ),
+      ),
+    );
+  }
+
+  // _buildTimerWidget metodu aynı
+  Widget _buildTimerWidget(int seconds) {
+    return Card(
+      elevation: 2,
+      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
+      child: Padding(
+        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
+        child: Row(
+          mainAxisAlignment: MainAxisAlignment.spaceBetween,
+          children: [
+            Countdown(
+              controller: _countdownController,
+              seconds: seconds,
+              build: (_, double time) => Text(
+                '${(time / 60).floor().toString().padLeft(2, '0')}:${(time % 60).floor().toString().padLeft(2, '0')}',
+                style: AppTextStyles.h1.copyWith(fontFamily: 'monospace'),
+              ),
+              interval: const Duration(milliseconds: 100),
+              onFinished: () {
+                ScaffoldMessenger.of(context).showSnackBar(
+                  const SnackBar(content: Text('Süre doldu!')),
+                );
+              },
+            ),
+            Row(
+              children: [
+                IconButton(icon: const Icon(Icons.play_arrow, color: AppColors.accent),onPressed: () => _countdownController.resume()),
+                IconButton(icon: const Icon(Icons.pause, color: AppColors.primaryAction),onPressed: () => _countdownController.pause()),
+                IconButton(icon: const Icon(Icons.replay, color: AppColors.neutralGrey),onPressed: () => _countdownController.restart()),
+              ],
+            )
+          ],
+        ),
+      ),
+    );
+  }
+}
\ No newline at end of file
diff --git a/lib/features/recipe_finder/presentation/screens/recipe_detail_screen.dart b/lib/features/recipe_finder/presentation/screens/recipe_detail_screen.dart
index e3b265e..78aacb3 100644
--- a/lib/features/recipe_finder/presentation/screens/recipe_detail_screen.dart
+++ b/lib/features/recipe_finder/presentation/screens/recipe_detail_screen.dart
@@ -1,5 +1,6 @@
 // lib/features/recipe_finder/presentation/screens/recipe_detail_screen.dart
 
+import 'package:flutter/foundation.dart';
 import 'package:flutter/material.dart';
 import 'package:flutter_riverpod/flutter_riverpod.dart';
 import 'package:neyese4/core/theme/app_colors.dart';
@@ -7,42 +8,43 @@ import 'package:neyese4/core/theme/app_text_styles.dart';
 import 'package:neyese4/data/models/saved_recipe.dart';
 import 'package:neyese4/data/providers.dart';
 import 'package:neyese4/features/recipe_finder/application/recipe_providers.dart';
-// Widget'larımızı import ediyoruz
+import 'package:neyese4/features/recipe_finder/presentation/screens/cooking_mode_screen.dart';
 import 'package:neyese4/features/recipe_finder/presentation/widgets/chef_tips_card.dart';
 import 'package:neyese4/features/recipe_finder/presentation/widgets/ingredients_card.dart';
 import 'package:neyese4/features/recipe_finder/presentation/widgets/nutrition_card.dart';
 import 'package:neyese4/features/recipe_finder/presentation/widgets/preparation_steps_card.dart';
 import 'package:neyese4/features/recipe_finder/presentation/widgets/recipe_title_and_meta_card.dart';
 import 'package:neyese4/features/recipe_finder/presentation/widgets/utensils_card.dart';
-import 'package:flutter/foundation.dart'; // Web kontrolü için bu importu ekleyin
 
-// Widget'ımızı tekrar ConsumerWidget'a çeviriyoruz.
 class RecipeDetailScreen extends ConsumerWidget {
   final int recipeId;
   const RecipeDetailScreen({super.key, required this.recipeId});
 
   @override
   Widget build(BuildContext context, WidgetRef ref) {
-    // Yeni birleşik provider'ımızı dinliyoruz.
     final recipeAsyncValue = ref.watch(fullRecipeProvider(recipeId));
 
-    return Scaffold(
-      backgroundColor: AppColors.background,
-      // Gelen verinin durumuna göre (yükleniyor, hata, başarılı) farklı arayüzler gösteriyoruz.
-      body: recipeAsyncValue.when(
-        loading: () => const Center(child: CircularProgressIndicator()),
-        error: (err, stack) => Center(
+    return recipeAsyncValue.when(
+      loading: () => const Scaffold(
+        body: Center(child: CircularProgressIndicator()),
+      ),
+      error: (err, stack) => Scaffold(
+        appBar: AppBar(title: const Text('Hata')),
+        body: Center(
           child: Padding(
             padding: const EdgeInsets.all(20.0),
-            child: Text('Tarif yüklenemedi.\nLütfen internet bağlantınızı kontrol edin.\nHata: $err', textAlign: TextAlign.center),
+            child: Text('Tarif yüklenemedi.\nLütfen internet bağlantınızı kontrol edin.\nHata: $err',
+                textAlign: TextAlign.center),
           ),
         ),
-        data: (content) {
-          // Veri başarıyla geldiğinde, daha önce tasarladığımız arayüzü gösteriyoruz.
-          final isSaved = ref.watch(isRecipeSavedProvider(recipeId));
-          const double cardSpacing = 24.0;
+      ),
+      data: (content) {
+        final isSaved = ref.watch(isRecipeSavedProvider(recipeId));
+        const double cardSpacing = 24.0;
 
-          return CustomScrollView(
+        return Scaffold(
+          backgroundColor: AppColors.background,
+          body: CustomScrollView(
             slivers: [
               SliverAppBar(
                 expandedHeight: 250.0,
@@ -55,7 +57,6 @@ class RecipeDetailScreen extends ConsumerWidget {
                         shadows: [Shadow(color: Colors.black54, blurRadius: 8, offset: Offset(0, 1))]),
                   ),
                   background: Image.network(
-                    // Web'de CORS hatası almamak için proxy kullanıyoruz.
                     kIsWeb
                         ? 'https://api.allorigins.win/raw?url=${Uri.encodeComponent(content.imageUrl)}'
                         : content.imageUrl,
@@ -64,18 +65,17 @@ class RecipeDetailScreen extends ConsumerWidget {
                   ),
                 ),
                 actions: [
-                  // Kaydetme butonunu tekrar aktif hale getiriyoruz
                   IconButton(
-                    icon: Icon(isSaved ? Icons.bookmark : Icons.bookmark_border_outlined, color: isSaved ? AppColors.primaryAction : null),
+                    icon: Icon(isSaved ? Icons.bookmark : Icons.bookmark_border_outlined,
+                        color: isSaved ? AppColors.primaryAction : null),
                     onPressed: () {
                       final repository = ref.read(savedRecipeRepositoryProvider);
                       if (isSaved) {
                         repository.deleteRecipe(recipeId);
                       } else {
-                        // Not: image URL'i şu an mock datadan değil, AI cevabından gelmiyor.
-                        // Şimdilik sabit bir URL kullanabiliriz veya Spoonacular'dan gelen orijinali kullanabiliriz.
-                        // Bu özellik daha sonra geliştirilebilir.
-                        repository.saveRecipe(SavedRecipe(id: recipeId, title: content.title, image: content.imageUrl));                      }
+                        repository.saveRecipe(
+                            SavedRecipe(id: recipeId, title: content.title, image: content.imageUrl));
+                      }
                     },
                   ),
                 ],
@@ -102,23 +102,31 @@ class RecipeDetailScreen extends ConsumerWidget {
                 ),
               ),
             ],
-          );
-        },
-      ),
-      // Butonun görünürlüğü veri yüklendiğinde sağlanır.
-      bottomNavigationBar: recipeAsyncValue.hasValue ? Padding(
-        padding: const EdgeInsets.all(16.0),
-        child: ElevatedButton.icon(
-          icon: const Icon(Icons.play_arrow_rounded, color: Colors.white),
-          onPressed: () {},
-          style: ElevatedButton.styleFrom(
-            backgroundColor: AppColors.accent,
-            padding: const EdgeInsets.symmetric(vertical: 16),
-            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
           ),
-          label: const Text('Tarifi Yapmaya Başla', style: AppTextStyles.button),
-        ),
-      ) : null,
+          bottomNavigationBar: Padding(
+            padding: const EdgeInsets.all(16.0),
+            child: ElevatedButton.icon(
+              icon: const Icon(Icons.play_arrow_rounded, color: Colors.white),
+              onPressed: () {
+                Navigator.of(context).push(
+                  MaterialPageRoute(
+                    builder: (context) => CookingModeScreen(
+                      recipeTitle: content.title,
+                      steps: content.preparationSteps,
+                    ),
+                  ),
+                );
+              },
+              style: ElevatedButton.styleFrom(
+                backgroundColor: AppColors.accent,
+                padding: const EdgeInsets.symmetric(vertical: 16),
+                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
+              ),
+              label: const Text('Tarifi Yapmaya Başla', style: AppTextStyles.button),
+            ),
+          ),
+        );
+      },
     );
   }
 }
\ No newline at end of file
diff --git a/lib/features/recipe_finder/presentation/screens/recipe_results_screen.dart b/lib/features/recipe_finder/presentation/screens/recipe_results_screen.dart
index 9db7a67..ebbf3c3 100644
--- a/lib/features/recipe_finder/presentation/screens/recipe_results_screen.dart
+++ b/lib/features/recipe_finder/presentation/screens/recipe_results_screen.dart
@@ -13,9 +13,9 @@ class RecipeResultsScreen extends ConsumerWidget {
 
   @override
   Widget build(BuildContext context, WidgetRef ref) {
-    final resultsAsyncValue = ref.watch(recipesByIngredientsProvider(searchQuery));
+    final resultsAsyncValue = ref.watch(searchResultsProvider(searchQuery));
     return Scaffold(
-      appBar: AppBar(title: Text('${searchQuery.ingredients.join(', ')} için Tarifler')),
+      appBar: AppBar(title: Text('${searchQuery.ingredients?.join(', ')} için Tarifler')),
       body: resultsAsyncValue.when(
         loading: () => const Center(child: CircularProgressIndicator()),
         error: (err, stack) => Center(child: Text('Hata oluştu: $err')),
diff --git a/lib/features/recipe_finder/presentation/widgets/recipe_card.dart b/lib/features/recipe_finder/presentation/widgets/recipe_card.dart
index e69de29..91f2e24 100644
--- a/lib/features/recipe_finder/presentation/widgets/recipe_card.dart
+++ b/lib/features/recipe_finder/presentation/widgets/recipe_card.dart
@@ -0,0 +1,76 @@
+// lib/features/recipe_finder/presentation/widgets/recipe_card.dart
+
+import 'package:flutter/foundation.dart';
+import 'package:flutter/material.dart';
+import 'package:neyese4/core/theme/app_colors.dart';
+import 'package:neyese4/core/theme/app_text_styles.dart';
+import 'package:neyese4/data/models/recipe_suggestion.dart';
+import 'package:neyese4/features/recipe_finder/presentation/screens/recipe_detail_screen.dart';
+
+class RecipeCard extends StatelessWidget {
+  final RecipeSuggestion recipe;
+
+  const RecipeCard({super.key, required this.recipe});
+
+  @override
+  Widget build(BuildContext context) {
+    final imageUrl = kIsWeb
+        ? 'https://api.allorigins.win/raw?url=${Uri.encodeComponent(recipe.image)}'
+        : recipe.image;
+
+    return GestureDetector(
+      onTap: () => Navigator.of(context).push(MaterialPageRoute(
+        builder: (context) => RecipeDetailScreen(recipeId: recipe.id),
+      )),
+      child: Card(
+        clipBehavior: Clip.antiAlias,
+        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16.0)),
+        elevation: 4,
+        shadowColor: Colors.black.withOpacity(0.2),
+        margin: const EdgeInsets.only(right: 16.0),
+        child: SizedBox(
+          width: 160,
+          child: Stack(
+            fit: StackFit.expand,
+            children: [
+              Image.network(
+                imageUrl,
+                fit: BoxFit.cover,
+                loadingBuilder: (context, child, progress) =>
+                progress == null ? child : const Center(child: CircularProgressIndicator()),
+                errorBuilder: (context, error, stackTrace) => Container(
+                    color: Colors.grey[200],
+                    child: const Icon(Icons.image_not_supported_outlined, color: Colors.grey)),
+              ),
+              Container(
+                decoration: BoxDecoration(
+                  gradient: LinearGradient(
+                    begin: Alignment.topCenter,
+                    end: Alignment.bottomCenter,
+                    colors: [Colors.transparent, Colors.black.withOpacity(0.8)],
+                    stops: const [0.5, 1.0],
+                  ),
+                ),
+              ),
+              Positioned(
+                bottom: 12,
+                left: 12,
+                right: 12,
+                child: Text(
+                  recipe.title,
+                  style: AppTextStyles.body.copyWith(
+                      color: Colors.white,
+                      fontWeight: FontWeight.bold,
+                      shadows: [const Shadow(color: Colors.black, blurRadius: 4, offset: Offset(0, 1))]
+                  ),
+                  maxLines: 3,
+                  overflow: TextOverflow.ellipsis,
+                ),
+              ),
+            ],
+          ),
+        ),
+      ),
+    );
+  }
+}
\ No newline at end of file
diff --git a/lib/main.dart b/lib/main.dart
index ffa02e7..2fa27d1 100644
--- a/lib/main.dart
+++ b/lib/main.dart
@@ -3,13 +3,16 @@ import 'package:flutter_riverpod/flutter_riverpod.dart';
 import 'package:hive_flutter/hive_flutter.dart';
 import 'package:neyese4/core/theme/app_colors.dart';
 import 'package:neyese4/core/theme/app_text_styles.dart';
-import 'package:neyese4/data/models/kitchen_ingredient.dart';
+import 'package:neyese4/data/models/pantry_item.dart';
 import 'package:neyese4/data/models/saved_recipe.dart';
 import 'package:neyese4/data/models/user_preferences.dart'; // Yeni modelimizi import ediyoruz
 import 'package:neyese4/data/repositories/saved_recipe_repository.dart';
 import 'package:neyese4/data/repositories/user_preferences_repository.dart'; // Repository'yi import ediyoruz
 import 'package:neyese4/screens/kitchen_screen.dart';
 import 'package:neyese4/main_screen.dart';
+import 'package:neyese4/data/models/pantry_item.dart'; // kitchen_ingredient import'u yerine bunu kullanın
+import 'package:neyese4/data/repositories/pantry_repository.dart'; // kitchen_box sabitini buraya taşıyacağız
+
 
 
 Future<void> main() async {
@@ -23,12 +26,12 @@ Future<void> main() async {
 
   // Tüm adaptörlerimizi kaydediyoruz.
   Hive.registerAdapter(SavedRecipeAdapter());
-  Hive.registerAdapter(KitchenIngredientAdapter());
+  Hive.registerAdapter(PantryItemAdapter());
   Hive.registerAdapter(UserPreferencesAdapter()); // YENİ EKLENDİ
 
   // Tüm kutularımızı açıyoruz.
   await Hive.openBox<SavedRecipe>(kSavedRecipesBox);
-  await Hive.openBox<KitchenIngredient>(kKitchenBox);
+  await Hive.openBox<PantryItem>(kPantryBoxName);
   await Hive.openBox<UserPreferences>(kUserPreferencesBox); // YENİ EKLENDİ
 
   runApp(
diff --git a/lib/screens/home_screen.dart b/lib/screens/home_screen.dart
index de14e58..5e4c478 100644
--- a/lib/screens/home_screen.dart
+++ b/lib/screens/home_screen.dart
@@ -4,130 +4,118 @@ import 'package:flutter_riverpod/flutter_riverpod.dart';
 import 'package:neyese4/core/theme/app_colors.dart';
 import 'package:neyese4/core/theme/app_text_styles.dart';
 import 'package:neyese4/data/models/recipe_suggestion.dart';
+import 'package:neyese4/data/models/saved_recipe.dart';
+import 'package:neyese4/data/providers.dart';
 import 'package:neyese4/features/profile/application/profile_providers.dart';
 import 'package:neyese4/features/recipe_finder/application/recipe_providers.dart';
 import 'package:neyese4/features/recipe_finder/application/search_query.dart';
 import 'package:neyese4/features/recipe_finder/presentation/screens/recipe_detail_screen.dart';
 import 'package:neyese4/features/recipe_finder/presentation/screens/recipe_results_screen.dart';
+import 'package:neyese4/features/recipe_finder/presentation/widgets/recipe_card.dart';
 
 class HomeScreen extends ConsumerStatefulWidget {
   const HomeScreen({super.key});
-
   @override
   ConsumerState<HomeScreen> createState() => _HomeScreenState();
 }
 
 class _HomeScreenState extends ConsumerState<HomeScreen> {
-  final _ingredient1Controller = TextEditingController();
-  final _ingredient2Controller = TextEditingController();
-  final _ingredient3Controller = TextEditingController();
-  final _ingredient4Controller = TextEditingController();
+  final _searchController = TextEditingController();
 
   @override
   void dispose() {
-    _ingredient1Controller.dispose();
-    _ingredient2Controller.dispose();
-    _ingredient3Controller.dispose();
-    _ingredient4Controller.dispose();
+    _searchController.dispose();
     super.dispose();
   }
 
   void _findRecipes() {
-    final ingredients = [
-      _ingredient1Controller.text,
-      _ingredient2Controller.text,
-      _ingredient3Controller.text,
-      _ingredient4Controller.text,
-    ]
-        .where((text) => text.trim().isNotEmpty)
-        .map((text) => text.trim())
-        .toList();
-
-    if (ingredients.isNotEmpty) {
-      // Kullanıcının kayıtlı tercihlerini okuyoruz.
-      final userPrefs = ref.read(userPreferencesProvider);
-
-      // Arama nesnesini oluştururken artık 'equipment' bilgisini de ekliyoruz.
-      final searchQuery = SearchQuery(
-        ingredients: ingredients,
-        diet: userPrefs.diet,
-        intolerances: userPrefs.intolerances,
-        equipment: userPrefs.equipment, // DÜZELTME: Bu satır eklendi.
-      );
-
-      Navigator.of(context).push(
-        MaterialPageRoute(
-          builder: (context) => RecipeResultsScreen(searchQuery: searchQuery),
-        ),
-      );
-    } else {
-      ScaffoldMessenger.of(context).showSnackBar(
-        const SnackBar(content: Text('Lütfen en az bir malzeme girin.')),
-      );
+    // ... Bu metotta değişiklik yok ...
+  }
+
+  void _findRecipesFromMyKitchen() {
+    // GÜNCELLENDİ: pantryBoxProvider kullanılıyor
+    final pantryBox = ref.read(pantryBoxProvider);
+    // GÜNCELLENDİ: .productName kullanılıyor
+    final myIngredients = pantryBox.values.map((e) => e.productName).toList();
+
+    if (myIngredients.isEmpty) {
+      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Önce "Mutfağım" sekmesinden malzeme eklemelisiniz.')));
+      return;
     }
+
+    final userPrefs = ref.read(userPreferencesProvider);
+    final searchQuery = SearchQuery(ingredients: myIngredients, diet: userPrefs.diet, intolerances: userPrefs.intolerances);
+    Navigator.of(context).push(MaterialPageRoute(builder: (context) => RecipeResultsScreen(searchQuery: searchQuery)));
   }
 
   @override
   Widget build(BuildContext context) {
+    final dinnerIdeasAsyncValue = ref.watch(dinnerIdeasProvider);
     final randomRecipesAsyncValue = ref.watch(randomRecipesProvider);
+    // GÜNCELLENDİ: pantryBoxProvider kullanılıyor
+    final pantryBox = ref.watch(pantryBoxProvider);
+    final myPantryItems = pantryBox.values.toList();
+    final savedRecipes = ref.watch(savedRecipesListProvider);
+
     return Scaffold(
       body: SingleChildScrollView(
-        padding: const EdgeInsets.symmetric(vertical: 60.0),
+        child: Padding(
+          padding: const EdgeInsets.only(top: 60.0, bottom: 24.0),
+          child: Column(
+            crossAxisAlignment: CrossAxisAlignment.start,
+            children: <Widget>[
+              _buildSearchSection(),
+              const SizedBox(height: 40),
+              Padding(
+                padding: const EdgeInsets.symmetric(horizontal: 24.0),
+                child: _buildMyKitchenSection(myPantryItems), // GÜNCELLENDİ
+              ),
+              const SizedBox(height: 40),
+              _buildCategoriesSection(),
+              const SizedBox(height: 40),
+              _buildLatestSavesSection(savedRecipes),
+              _buildRecipeCarousel(title: 'Akşam Yemeği Fikirleri', asyncValue: dinnerIdeasAsyncValue),
+              _buildRecipeCarousel(title: 'Günün Önerileri', asyncValue: randomRecipesAsyncValue),
+            ],
+          ),
+        ),
+      ),
+    );
+  }
+
+  // --- WIDGET BUILDER METOTLARI ---
+
+  Widget _buildMyKitchenSection(List<dynamic> ingredients) {
+    return Card(
+      elevation: 2,
+      shadowColor: Colors.grey.withOpacity(0.1),
+      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
+      child: Padding(
+        padding: const EdgeInsets.all(16.0),
         child: Column(
           crossAxisAlignment: CrossAxisAlignment.start,
-          children: <Widget>[
-            Padding(
-              padding: const EdgeInsets.symmetric(horizontal: 24.0),
-              child: Column(
-                crossAxisAlignment: CrossAxisAlignment.start,
-                children: [
-                  const Text('Mutfağında ne var?', style: AppTextStyles.h1),
-                  const SizedBox(height: 8),
-                  const Text(
-                    'Malzemelerini gir, sana ne yapabileceğini söyleyelim.',
-                    style: AppTextStyles.body,
-                  ),
-                  const SizedBox(height: 32),
-                  _buildIngredientTextField(controller: _ingredient1Controller, hintText: '1. Malzeme (örn: Tavuk)'),
-                  const SizedBox(height: 16),
-                  _buildIngredientTextField(controller: _ingredient2Controller, hintText: '2. Malzeme (örn: Domates)'),
-                  const SizedBox(height: 16),
-                  _buildIngredientTextField(controller: _ingredient3Controller, hintText: '3. Malzeme (isteğe bağlı)'),
-                  const SizedBox(height: 16),
-                  _buildIngredientTextField(controller: _ingredient4Controller, hintText: '4. Malzeme (isteğe bağlı)'),
-                  const SizedBox(height: 40),
-                  SizedBox(
-                    width: double.infinity,
-                    child: ElevatedButton(
-                      onPressed: _findRecipes,
-                      style: ElevatedButton.styleFrom(
-                        backgroundColor: AppColors.primaryAction,
-                        padding: const EdgeInsets.symmetric(vertical: 16),
-                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
-                      ),
-                      child: const Text('Tarif Bul', style: AppTextStyles.button),
-                    ),
-                  ),
-                ],
-              ),
-            ),
-            const SizedBox(height: 40),
-            const Padding(
-              padding: EdgeInsets.symmetric(horizontal: 24.0),
-              child: Text('Günün Önerileri', style: AppTextStyles.h2),
+          children: [
+            const Text('Mutfağımdakilerle Tarif Bul', style: AppTextStyles.h2),
+            const SizedBox(height: 8),
+            Text(
+              ingredients.isEmpty
+                  ? 'Mutfağınızda henüz malzeme yok. Eklemeye başlayın!'
+              // GÜNCELLENDİ: .productName kullanılıyor
+                  : '${ingredients.length} malzemeniz var: ${ingredients.take(3).map((e) => e.productName).join(', ')}...',
+              style: AppTextStyles.caption,
             ),
             const SizedBox(height: 16),
             SizedBox(
-              height: 220,
-              child: randomRecipesAsyncValue.when(
-                data: (recipes) => ListView.builder(
-                  scrollDirection: Axis.horizontal,
-                  itemCount: recipes.length,
-                  padding: const EdgeInsets.only(left: 24.0, right: 8.0),
-                  itemBuilder: (context, index) => _buildSuggestionCard(context: context, recipe: recipes[index]),
-                ),
-                loading: () => const Center(child: CircularProgressIndicator()),
-                error: (err, stack) => const Center(child: Text('Öneriler yüklenemedi.')),
+              width: double.infinity,
+              child: OutlinedButton.icon(
+                onPressed: _findRecipesFromMyKitchen,
+                icon: const Icon(Icons.search),
+                label: const Text('Tüm Malzemelerimle Ara'),
+                style: OutlinedButton.styleFrom(
+                    padding: const EdgeInsets.symmetric(vertical: 12),
+                    side: const BorderSide(color: AppColors.primaryAction),
+                    foregroundColor: AppColors.primaryAction,
+                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12))),
               ),
             ),
           ],
@@ -136,53 +124,145 @@ class _HomeScreenState extends ConsumerState<HomeScreen> {
     );
   }
 
-  Widget _buildIngredientTextField({required TextEditingController controller, required String hintText}) {
-    return TextField(
-      controller: controller,
-      style: AppTextStyles.input,
-      decoration: InputDecoration(
-        hintText: hintText,
-        hintStyle: AppTextStyles.caption.copyWith(fontSize: 16),
-        filled: true,
-        fillColor: Colors.white,
-        border: OutlineInputBorder(borderRadius: BorderRadius.circular(12), borderSide: const BorderSide(color: AppColors.neutralGrey, width: 0.5)),
-        enabledBorder: OutlineInputBorder(borderRadius: BorderRadius.circular(12), borderSide: BorderSide(color: AppColors.neutralGrey.withOpacity(0.5), width: 1.0)),
-        focusedBorder: OutlineInputBorder(borderRadius: BorderRadius.circular(12), borderSide: const BorderSide(color: AppColors.primaryAction, width: 1.5)),
-        contentPadding: const EdgeInsets.symmetric(vertical: 16, horizontal: 20),
+  Widget _buildSearchSection() {
+    return Padding(
+      padding: const EdgeInsets.symmetric(horizontal: 24.0),
+      child: Column(
+        crossAxisAlignment: CrossAxisAlignment.start,
+        children: [
+          const Text('Bugün ne yesek?', style: AppTextStyles.h1),
+          const SizedBox(height: 8),
+          const Text('İstediğin tarifi veya elindeki malzemeleri yaz.', style: AppTextStyles.body),
+          const SizedBox(height: 24),
+          TextField(
+            controller: _searchController,
+            style: AppTextStyles.input,
+            decoration: InputDecoration(
+              hintText: 'Tavuk, Pilav veya Menemen...',
+              prefixIcon: const Icon(Icons.search, color: AppColors.neutralGrey),
+              filled: true,
+              fillColor: Colors.white,
+              border: OutlineInputBorder(borderRadius: BorderRadius.circular(16), borderSide: BorderSide.none),
+              contentPadding: const EdgeInsets.symmetric(vertical: 16, horizontal: 20),
+            ),
+            onSubmitted: (_) => _findRecipes(),
+          ),
+          const SizedBox(height: 16),
+          SizedBox(
+            width: double.infinity,
+            child: ElevatedButton(
+              onPressed: _findRecipes,
+              style: ElevatedButton.styleFrom(
+                  backgroundColor: AppColors.primaryAction,
+                  padding: const EdgeInsets.symmetric(vertical: 16),
+                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
+                  elevation: 2,
+                  shadowColor: AppColors.primaryAction.withOpacity(0.4)
+              ),
+              child: const Text('Tarif Bul', style: AppTextStyles.button),
+            ),
+          ),
+        ],
       ),
     );
   }
 
-  Widget _buildSuggestionCard({required BuildContext context, required RecipeSuggestion recipe}) {
-    // DÜZELTME: Güvenilir proxy ve doğru URL kodlaması kullanılıyor.
-    final imageUrl = kIsWeb ? 'https://api.allorigins.win/raw?url=${Uri.encodeComponent(recipe.image)}' : recipe.image;
 
-    return GestureDetector(
-      onTap: () => Navigator.of(context).push(MaterialPageRoute(builder: (context) => RecipeDetailScreen(recipeId: recipe.id))),
-      child: Padding(
-        padding: const EdgeInsets.only(right: 16.0),
-        child: SizedBox(
-          width: 150,
-          child: Column(
-            crossAxisAlignment: CrossAxisAlignment.start,
-            children: [
-              ClipRRect(
-                borderRadius: BorderRadius.circular(12.0),
-                child: Image.network(
-                  imageUrl, // Düzeltilmiş URL'yi kullanıyoruz.
-                  height: 120,
-                  width: 150,
-                  fit: BoxFit.cover,
-                  loadingBuilder: (context, child, progress) => progress == null ? child : const Center(child: CircularProgressIndicator()),
-                  errorBuilder: (context, error, stackTrace) => Container(height: 120, width: 150, color: Colors.grey[200], child: const Icon(Icons.image_not_supported_outlined, color: Colors.grey)),
-                ),
-              ),
-              const SizedBox(height: 8),
-              Text(recipe.title, style: AppTextStyles.body, maxLines: 2, overflow: TextOverflow.ellipsis),
-            ],
+  Widget _buildCategoriesSection() {
+    final Map<String, IconData> categoryIcons = {
+      'Kahvaltı': Icons.free_breakfast_outlined, 'Tatlı': Icons.cake_outlined, 'Salata': Icons.restaurant_outlined,
+      'İtalyan': Icons.local_pizza_outlined, 'Vegan': Icons.eco_outlined, 'Hızlı Tarifler': Icons.timer_outlined,
+    };
+    final Map<String, SearchQuery> categoryMapping = {
+      'Kahvaltı': const SearchQuery(type: 'breakfast'), 'Tatlı': const SearchQuery(type: 'dessert'),
+      'Salata': const SearchQuery(type: 'salad'), 'İtalyan': const SearchQuery(cuisine: 'italian'),
+      'Vegan': const SearchQuery(diet: 'vegan'), 'Hızlı Tarifler': const SearchQuery(maxReadyTime: 30),
+    };
+
+    return Column(
+      crossAxisAlignment: CrossAxisAlignment.start,
+      children: [
+        const Padding(
+          padding: EdgeInsets.symmetric(horizontal: 24.0),
+          child: Text('Kategorileri Keşfet', style: AppTextStyles.h2),
+        ),
+        const SizedBox(height: 16),
+        SizedBox(
+          height: 40,
+          child: ListView.separated(
+            scrollDirection: Axis.horizontal,
+            padding: const EdgeInsets.symmetric(horizontal: 24.0),
+            itemCount: categoryMapping.length,
+            separatorBuilder: (context, index) => const SizedBox(width: 12),
+            itemBuilder: (context, index) {
+              final categoryName = categoryMapping.keys.elementAt(index);
+              final searchQuery = categoryMapping.values.elementAt(index);
+              return ActionChip(
+                avatar: Icon(categoryIcons[categoryName] ?? Icons.circle, size: 18, color: AppColors.primaryText),
+                label: Text(categoryName),
+                labelStyle: AppTextStyles.body.copyWith(fontSize: 14),
+                backgroundColor: Colors.white,
+                shape: RoundedRectangleBorder(
+                    borderRadius: BorderRadius.circular(8.0),
+                    side: BorderSide(color: AppColors.neutralGrey.withOpacity(0.3))),
+                onPressed: () {
+                  final userPrefs = ref.read(userPreferencesProvider);
+                  final finalQuery = searchQuery.copyWith(diet: userPrefs.diet, intolerances: userPrefs.intolerances);
+                  Navigator.of(context).push(MaterialPageRoute(
+                    builder: (context) => RecipeResultsScreen(searchQuery: finalQuery),
+                  ));
+                },
+              );
+            },
           ),
         ),
-      ),
+      ],
     );
   }
-}
+
+  Widget _buildLatestSavesSection(List<SavedRecipe> savedRecipes) {
+    if (savedRecipes.isEmpty) return const SizedBox.shrink();
+    return _buildRecipeCarousel(
+      title: 'Son Kaydettiklerin',
+      recipes: savedRecipes.reversed.map((e) => RecipeSuggestion(id: e.id, title: e.title, image: e.image)).toList(),
+    );
+  }
+
+  Widget _buildRecipeCarousel({
+    required String title,
+    List<RecipeSuggestion>? recipes,
+    AsyncValue<List<RecipeSuggestion>>? asyncValue,
+  }) {
+    return Column(
+      crossAxisAlignment: CrossAxisAlignment.start,
+      children: [
+        Padding(
+          padding: const EdgeInsets.symmetric(horizontal: 24.0),
+          child: Text(title, style: AppTextStyles.h2),
+        ),
+        const SizedBox(height: 16),
+        SizedBox(
+          height: 220,
+          child: asyncValue != null
+              ? asyncValue.when(
+            data: (recipes) => _buildCarouselListView(recipes),
+            loading: () => const Center(child: CircularProgressIndicator()),
+            error: (err, stack) => Center(child: Text('Öneriler yüklenemedi: $err')),
+          )
+              : _buildCarouselListView(recipes ?? []),
+        ),
+        const SizedBox(height: 40),
+      ],
+    );
+  }
+
+  Widget _buildCarouselListView(List<RecipeSuggestion> recipes) {
+    return ListView.builder(
+      scrollDirection: Axis.horizontal,
+      itemCount: recipes.length,
+      padding: const EdgeInsets.only(left: 24.0, right: 8.0),
+      itemBuilder: (context, index) => RecipeCard(recipe: recipes[index]),
+    );
+  }
+
+}
\ No newline at end of file
diff --git a/lib/screens/kitchen_screen.dart b/lib/screens/kitchen_screen.dart
index 310c704..494fab2 100644
--- a/lib/screens/kitchen_screen.dart
+++ b/lib/screens/kitchen_screen.dart
@@ -1,117 +1,469 @@
+
+import 'dart:io';
 import 'package:flutter/material.dart';
 import 'package:flutter_riverpod/flutter_riverpod.dart';
+import 'package:hive_flutter/hive_flutter.dart';
+import 'package:image_picker/image_picker.dart';
+import 'package:intl/intl.dart';
+import 'package:neyese4/core/api/ai_service.dart';
 import 'package:neyese4/core/theme/app_colors.dart';
 import 'package:neyese4/core/theme/app_text_styles.dart';
-import 'package:neyese4/data/models/kitchen_ingredient.dart';
-import 'package:hive_flutter/hive_flutter.dart'; // Hive'ı UI'da kullanmak için import ediyoruz.
+import 'package:neyese4/data/models/pantry_item.dart';
+import 'package:neyese4/data/providers.dart';
+import 'package:neyese4/data/repositories/product_repository.dart';
 
-// Veritabanı kutusunun adını tanımlıyoruz.
-const String kKitchenBox = 'kitchen_box';
+class KitchenScreen extends ConsumerWidget {
+  const KitchenScreen({super.key});
 
-// Mutfağımdaki malzemeler kutusunu dinleyen bir provider.
-// Bu, listenin anında güncellenmesini sağlar.
-final kitchenBoxProvider = Provider((ref) => Hive.box<KitchenIngredient>(kKitchenBox));
+  void _showInfoToast(BuildContext context, String message) {
+    ScaffoldMessenger.of(context).showSnackBar(
+      SnackBar(
+        content: Text(message),
+        duration: const Duration(seconds: 4),
+        behavior: SnackBarBehavior.floating,
+      ),
+    );
+  }
 
-class KitchenScreen extends ConsumerStatefulWidget {
-  const KitchenScreen({super.key});
+  Future<void> _getImageAndAnalyze(ImageSource source, BuildContext context, WidgetRef ref) async {
+    final ImagePicker picker = ImagePicker();
+    final XFile? image = await picker.pickImage(source: source, imageQuality: 70);
+    if (image == null) return;
 
-  @override
-  ConsumerState<KitchenScreen> createState() => _KitchenScreenState();
-}
+    showDialog(context: context, barrierDismissible: false, builder: (context) => const Center(child: CircularProgressIndicator()));
 
-class _KitchenScreenState extends ConsumerState<KitchenScreen> {
-  final _controller = TextEditingController();
+    try {
+      final aiService = ref.read(aiServiceProvider);
+      final productRepo = ref.read(productRepositoryProvider);
+      Map<String, dynamic>? finalData;
 
-  @override
-  void dispose() {
-    _controller.dispose();
-    super.dispose();
-  }
+      final aiResult = await aiService.analyzeProductImage(File(image.path));
+      final String? barcode = aiResult['barcode']?.toString();
+
+      if (barcode != null && barcode.isNotEmpty) {
+        finalData = await productRepo.fetchProductByBarcode(barcode);
+        finalData ??= aiResult;
+      } else {
+        finalData = aiResult;
+      }
+
+      Navigator.pop(context);
 
-  void _addIngredient() {
-    final text = _controller.text.trim();
-    if (text.isNotEmpty) {
-      final box = ref.read(kitchenBoxProvider);
-      // Malzemenin adını anahtar (key) olarak kullanarak ekliyoruz.
-      // Bu, aynı malzemenin tekrar eklenmesini engeller.
-      box.put(text.toLowerCase(), KitchenIngredient(name: text));
-      _controller.clear();
+      // GÜNCELLENDİ: Formu açmadan önce eksik bilgi kontrolü ve bilgilendirme
+      // Kullanıcıya her zaman bir geri bildirim veriyoruz.
+      if (finalData == null || finalData.isEmpty) {
+        _showInfoToast(context, 'Ürün bilgileri okunamadı. Lütfen bilgileri elle girin.');
+      } else if (finalData['expirationDate'] == null) {
+        _showInfoToast(context, 'Ürünün son kullanma tarihi okunamadı. Lütfen manuel olarak girin.');
+      } else {
+        _showInfoToast(context, 'Ürün bilgileri forma dolduruldu. Lütfen kontrol edin.');
+      }
+
+      _showAddItemFormSheet(context, ref, initialData: finalData);
+
+    } catch (e) {
+      Navigator.pop(context);
+      _showInfoToast(context, 'Fotoğraf analiz edilemedi: $e');
     }
   }
 
+  void _showImageSourceOptions(BuildContext context, WidgetRef ref) {
+    showModalBottomSheet(
+      context: context,
+      builder: (ctx) {
+        return Wrap(
+          children: <Widget>[
+            ListTile(
+              leading: const Icon(Icons.photo_camera),
+              title: const Text('Kamerayı Kullan'),
+              onTap: () {
+                Navigator.pop(ctx);
+                _getImageAndAnalyze(ImageSource.camera, context, ref);
+              },
+            ),
+            ListTile(
+              leading: const Icon(Icons.photo_library),
+              title: const Text('Galeriden Seç'),
+              onTap: () {
+                Navigator.pop(ctx);
+                _getImageAndAnalyze(ImageSource.gallery, context, ref);
+              },
+            ),
+          ],
+        );
+      },
+    );
+  }
+
+  void _showAddOptions(BuildContext context, WidgetRef ref) {
+    showModalBottomSheet(
+      context: context,
+      shape: const RoundedRectangleBorder(borderRadius: BorderRadius.vertical(top: Radius.circular(20))),
+      builder: (ctx) {
+        return Wrap(
+          children: <Widget>[
+            ListTile(
+              leading: const Icon(Icons.camera_alt_outlined),
+              title: const Text('Fotoğraf ile Otomatik Ekle'),
+              onTap: () {
+                Navigator.pop(ctx);
+                _showImageSourceOptions(context, ref);
+              },
+            ),
+            ListTile(
+              leading: const Icon(Icons.edit_note),
+              title: const Text('Elle Ekle'),
+              onTap: () {
+                Navigator.pop(ctx);
+                _showAddItemFormSheet(context, ref);
+              },
+            ),
+          ],
+        );
+      },
+    );
+  }
+
+  void _showAddItemFormSheet(BuildContext context, WidgetRef ref, {Map<String, dynamic>? initialData, dynamic itemKey, PantryItem? editingItem}) {
+    showModalBottomSheet(
+      context: context,
+      isScrollControlled: true,
+      shape: const RoundedRectangleBorder(borderRadius: BorderRadius.vertical(top: Radius.circular(20))),
+      builder: (context) => Padding(
+        padding: EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom),
+        child: _AddItemForm(
+          initialData: initialData,
+          editingItem: editingItem,
+          onSave: (item) {
+            final box = ref.read(pantryBoxProvider);
+            if (itemKey != null) {
+              box.put(itemKey, item);
+            } else {
+              box.put('${item.productName}-${item.addedDate.toIso8601String()}', item);
+            }
+            Navigator.pop(context);
+          },
+        ),
+      ),
+    );
+  }
+
   @override
-  Widget build(BuildContext context) {
-    // Kutuyu dinleyerek arayüzümüzü reaktif hale getiriyoruz.
-    final kitchenBox = ref.watch(kitchenBoxProvider);
+  Widget build(BuildContext context, WidgetRef ref) {
+    final pantryBox = ref.watch(pantryBoxProvider);
 
     return Scaffold(
       appBar: AppBar(
-        title: const Text('Mutfağım'),
+        title: const Text('Mutfağım (Akıllı Kiler)'),
         centerTitle: false,
       ),
-      body: Column(
-        children: [
-          // Malzeme ekleme alanı
-          Padding(
-            padding: const EdgeInsets.all(16.0),
-            child: Row(
-              children: [
-                Expanded(
-                  child: TextField(
-                    controller: _controller,
-                    decoration: const InputDecoration(
-                      labelText: 'Malzeme Ekle',
-                      border: OutlineInputBorder(),
+      body: ValueListenableBuilder(
+        valueListenable: pantryBox.listenable(),
+        builder: (context, Box<PantryItem> box, _) {
+          final items = box.values.toList();
+          if (items.isEmpty) {
+            return Center(
+              child: Padding(
+                padding: const EdgeInsets.all(24.0),
+                child: Column(
+                  mainAxisAlignment: MainAxisAlignment.center,
+                  children: [
+                    Icon(Icons.kitchen_outlined, size: 100, color: Colors.grey[300]),
+                    const SizedBox(height: 24),
+                    const Text('Kilerin Henüz Boş', style: AppTextStyles.h2, textAlign: TextAlign.center),
+                    const SizedBox(height: 8),
+                    Text(
+                      'Sağ alttaki (+) butonuna basarak kilerine yeni ürünler eklemeye başla!',
+                      style: AppTextStyles.body.copyWith(color: Colors.grey[600]),
+                      textAlign: TextAlign.center,
                     ),
-                    onSubmitted: (_) => _addIngredient(),
+                  ],
+                ),
+              ),
+            );
+          }
+          final groupedItems = <String, List<PantryItem>>{};
+          for (var i = 0; i < items.length; i++) {
+            final item = items[i];
+            (groupedItems[item.category] ??= []).add(item);
+          }
+          final sortedCategories = groupedItems.keys.toList()..sort();
+
+          return ListView.builder(
+            padding: const EdgeInsets.only(bottom: 80),
+            itemCount: sortedCategories.length,
+            itemBuilder: (context, index) {
+              final category = sortedCategories[index];
+              final categoryItems = groupedItems[category]!;
+              return ExpansionTile(
+                title: Text(category, style: AppTextStyles.h2.copyWith(fontSize: 18)),
+                initiallyExpanded: true,
+                children: categoryItems.map((item) {
+                  final itemKey = box.keyAt(box.values.toList().indexOf(item));
+                  return ListTile(
+                    title: Text(item.productName, style: AppTextStyles.body),
+                    subtitle: Text('${item.quantity.toStringAsFixed(0)} ${item.unit} ${item.brand != null ? '(${item.brand})' : ''}'),
+                    trailing: item.expirationDate != null
+                        ? Text('SKT: ${DateFormat('dd.MM.yy').format(item.expirationDate!)}', style: AppTextStyles.caption)
+                        : null,
+                    onTap: () => _showAddItemFormSheet(context, ref, itemKey: itemKey, editingItem: item),
+                    onLongPress: () {
+                      showDialog(
+                        context: context,
+                        builder: (ctx) => AlertDialog(
+                          title: const Text('Ürünü Sil'),
+                          content: Text('"${item.productName}" ürününü kilerinden silmek istediğine emin misin?'),
+                          actions: [
+                            TextButton(onPressed: () => Navigator.pop(ctx), child: const Text('İptal')),
+                            TextButton(
+                              onPressed: () {
+                                box.delete(itemKey);
+                                Navigator.pop(ctx);
+                              },
+                              child: const Text('Sil', style: TextStyle(color: Colors.red)),
+                            ),
+                          ],
+                        ),
+                      );
+                    },
+                  );
+                }).toList(),
+              );
+            },
+          );
+        },
+      ),
+      floatingActionButton: FloatingActionButton(
+        onPressed: () => _showAddOptions(context, ref),
+        backgroundColor: AppColors.primaryAction,
+        foregroundColor: Colors.white,
+        child: const Icon(Icons.add),
+      ),
+    );
+  }
+}
+
+class _AddItemForm extends StatefulWidget {
+  final Function(PantryItem) onSave;
+  final Map<String, dynamic>? initialData;
+  final PantryItem? editingItem;
+
+  const _AddItemForm({required this.onSave, this.initialData, this.editingItem});
+
+  @override
+  State<_AddItemForm> createState() => _AddItemFormState();
+}
+
+class _AddItemFormState extends State<_AddItemForm> {
+  final _formKey = GlobalKey<FormState>();
+  final _nameController = TextEditingController();
+  final _brandController = TextEditingController();
+  final _quantityController = TextEditingController();
+  String _selectedUnit = 'adet';
+  String _selectedCategory = 'Diğer';
+  DateTime? _selectedDate;
+  String? _barcode;
+  String? _infoMessage;
+
+
+  final List<String> _units = ['adet', 'g', 'kg', 'ml', 'L', 'paket', 'dilim', 'kaşık'];
+  final List<String> _categories = ['Sebze & Meyve', 'Et & Tavuk', 'Süt Ürünleri', 'Bakliyat', 'Baharatlar', 'İçecekler', 'Atıştırmalık', 'Diğer'];
+
+  @override
+  void initState() {
+    super.initState();
+    if (widget.editingItem != null) {
+      // Düzenleme modu
+      final item = widget.editingItem!;
+      _nameController.text = item.productName;
+      _brandController.text = item.brand ?? '';
+      _quantityController.text = item.quantity.toStringAsFixed(item.quantity.truncateToDouble() == item.quantity ? 0 : 2);
+      _selectedUnit = item.unit;
+      _selectedCategory = item.category;
+      _selectedDate = item.expirationDate;
+      _barcode = item.barcode;
+    } else if (widget.initialData != null) {
+      // GÜNCELLENDİ: AI/API'dan gelen veriyi daha akıllı ve savunmacı işleyen bölüm
+      final data = widget.initialData!;
+      _nameController.text = data['productName']?.toString() ?? '';
+      _brandController.text = data['brand']?.toString() ?? '';
+      _barcode = data['barcode']?.toString();
+
+      final quantity = data['quantity'];
+      if (quantity != null && quantity.toString().isNotEmpty) {
+        _quantityController.text = (quantity as num).toStringAsFixed(0);
+      }
+
+      final initialUnit = data['unit']?.toString().toLowerCase();
+      if (initialUnit != null && _units.contains(initialUnit)) {
+        _selectedUnit = initialUnit;
+      }
+
+      final initialCategory = data['category']?.toString();
+      if (initialCategory != null) {
+        if (_categories.contains(initialCategory)) {
+          _selectedCategory = initialCategory;
+        } else {
+          // Gelen kategori listede yoksa, akıllı eşleştirme yapmayı dene
+          _selectedCategory = _mapApiCategoryToAppCategory(initialCategory);
+        }
+      }
+
+      final expDateString = data['expirationDate']?.toString();
+      if (expDateString != null) {
+        _selectedDate = DateTime.tryParse(expDateString);
+      }
+
+      // Bilgilendirme mesajını oluştur
+      if (_quantityController.text.isEmpty || _selectedDate == null) {
+        _infoMessage = 'Bazı bilgiler okunamadı. Lütfen kontrol edip eksikleri tamamlayın.';
+      } else {
+        _infoMessage = 'Ürün bilgileri forma dolduruldu. Lütfen kontrol edin.';
+      }
+    }
+  }
+
+  String _mapApiCategoryToAppCategory(String apiCategory) {
+    final lowerCaseCategory = apiCategory.toLowerCase();
+    if (lowerCaseCategory.contains('dairies') || lowerCaseCategory.contains('cheese')) {
+      return 'Süt Ürünleri';
+    }
+    if (lowerCaseCategory.contains('meat') || lowerCaseCategory.contains('poultry')) {
+      return 'Et & Tavuk';
+    }
+    if (lowerCaseCategory.contains('fruit') || lowerCaseCategory.contains('vegetable')) {
+      return 'Sebze & Meyve';
+    }
+    if (lowerCaseCategory.contains('beverages') || lowerCaseCategory.contains('drinks')) {
+      return 'İçecekler';
+    }
+    if (lowerCaseCategory.contains('snacks')) {
+      return 'Atıştırmalık';
+    }
+    // Eşleşme bulunamazsa Diğer olarak kalsın
+    return 'Diğer';
+  }
+
+
+  @override
+  void dispose() {
+    _nameController.dispose();
+    _brandController.dispose();
+    _quantityController.dispose();
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    return SingleChildScrollView(
+      child: Padding(
+        padding: const EdgeInsets.all(24.0),
+        child: Form(
+          key: _formKey,
+          child: Column(
+            mainAxisSize: MainAxisSize.min,
+            crossAxisAlignment: CrossAxisAlignment.stretch,
+            children: [
+              Text(widget.editingItem != null ? 'Ürünü Düzenle' : 'Yeni Ürün Ekle', style: AppTextStyles.h2, textAlign: TextAlign.center),
+              const SizedBox(height: 16),
+              // YENİ: Form içi bilgilendirme mesajı
+              if (_infoMessage != null)
+                Container(
+                  padding: const EdgeInsets.all(12),
+                  margin: const EdgeInsets.only(bottom: 16),
+                  decoration: BoxDecoration(
+                    color: AppColors.primaryAction.withOpacity(0.1),
+                    borderRadius: BorderRadius.circular(8),
+                  ),
+                  child: Row(
+                    children: [
+                      const Icon(Icons.info_outline, color: AppColors.primaryAction),
+                      const SizedBox(width: 12),
+                      Expanded(child: Text(_infoMessage!, style: AppTextStyles.body.copyWith(color: AppColors.primaryAction))),
+                    ],
                   ),
                 ),
-                const SizedBox(width: 8),
-                IconButton.filled(
-                  icon: const Icon(Icons.add),
-                  onPressed: _addIngredient,
-                  style: IconButton.styleFrom(
-                    backgroundColor: AppColors.primaryAction,
-                    foregroundColor: Colors.white,
+              TextFormField(
+                controller: _nameController,
+                decoration: const InputDecoration(labelText: 'Ürün Adı*'),
+                validator: (value) => value!.isEmpty ? 'Lütfen bir ad girin' : null,
+              ),
+              TextFormField(
+                controller: _brandController,
+                decoration: const InputDecoration(labelText: 'Marka (İsteğe Bağlı)'),
+              ),
+              Row(
+                crossAxisAlignment: CrossAxisAlignment.end,
+                children: [
+                  Expanded(
+                    flex: 3,
+                    child: TextFormField(
+                      controller: _quantityController,
+                      decoration: const InputDecoration(labelText: 'Miktar*'),
+                      keyboardType: TextInputType.number,
+                      validator: (value) => value!.isEmpty ? 'Lütfen miktar girin' : null,
+                    ),
                   ),
+                  const SizedBox(width: 20),
+                  Expanded(
+                    flex: 2,
+                    child: DropdownButtonFormField<String>(
+                      value: _selectedUnit,
+                      items: _units.map((unit) => DropdownMenuItem(value: unit, child: Text(unit))).toList(),
+                      onChanged: (value) => setState(() => _selectedUnit = value!),
+                    ),
+                  ),
+                ],
+              ),
+              DropdownButtonFormField<String>(
+                value: _selectedCategory,
+                decoration: const InputDecoration(labelText: 'Kategori*'),
+                items: _categories.map((cat) => DropdownMenuItem(value: cat, child: Text(cat))).toList(),
+                onChanged: (value) => setState(() => _selectedCategory = value!),
+              ),
+              TextFormField(
+                decoration: InputDecoration(
+                  labelText: 'Son Kullanma Tarihi (İsteğe Bağlı)',
+                  hintText: _selectedDate == null ? 'Tarih Seç' : DateFormat('dd MMMM yyyy').format(_selectedDate!),
                 ),
-              ],
-            ),
-          ),
-          // Malzeme listesi
-          Expanded(
-            // Kutudaki değişiklikleri dinleyen ValueListenableBuilder.
-            child: ValueListenableBuilder(
-              valueListenable: kitchenBox.listenable(),
-              builder: (context, Box<KitchenIngredient> box, _) {
-                final ingredients = box.values.toList();
-                if (ingredients.isEmpty) {
-                  return const Center(
-                    child: Text('Mutfağınızda hiç malzeme yok.'),
+                readOnly: true,
+                onTap: () async {
+                  final date = await showDatePicker(
+                    context: context,
+                    initialDate: _selectedDate ?? DateTime.now(),
+                    firstDate: DateTime.now().subtract(const Duration(days: 30)),
+                    lastDate: DateTime.now().add(const Duration(days: 365 * 5)),
                   );
-                }
-                return ListView.builder(
-                  itemCount: ingredients.length,
-                  itemBuilder: (context, index) {
-                    final ingredient = ingredients[index];
-                    return ListTile(
-                      title: Text(ingredient.name, style: AppTextStyles.body),
-                      // Malzemeyi silmek için bir ikon.
-                      trailing: IconButton(
-                        icon: const Icon(Icons.delete_outline, color: Colors.red),
-                        onPressed: () {
-                          // Malzemeyi anahtarını kullanarak siliyoruz.
-                          box.delete(ingredient.name.toLowerCase());
-                        },
-                      ),
+                  if (date != null) setState(() => _selectedDate = date);
+                },
+              ),
+              const SizedBox(height: 24),
+              ElevatedButton(
+                style: ElevatedButton.styleFrom(
+                    padding: const EdgeInsets.symmetric(vertical: 16),
+                    backgroundColor: AppColors.primaryAction
+                ),
+                onPressed: () {
+                  if (_formKey.currentState!.validate()) {
+                    final newItem = PantryItem(
+                      productName: _nameController.text,
+                      brand: _brandController.text.isNotEmpty ? _brandController.text : null,
+                      quantity: double.tryParse(_quantityController.text) ?? 0,
+                      unit: _selectedUnit,
+                      category: _selectedCategory,
+                      addedDate: widget.editingItem?.addedDate ?? DateTime.now(),
+                      expirationDate: _selectedDate,
+                      barcode: widget.editingItem?.barcode ?? _barcode,
                     );
-                  },
-                );
-              },
-            ),
+                    widget.onSave(newItem);
+                  }
+                },
+                child: Text(widget.editingItem != null ? 'GÜNCELLE' : 'KİLERE EKLE', style: AppTextStyles.button),
+              )
+            ],
           ),
-        ],
+        ),
       ),
     );
   }
-}
+}
\ No newline at end of file
diff --git a/lib/screens/profile_screen.dart b/lib/screens/profile_screen.dart
index 174a94c..c37f4c1 100644
--- a/lib/screens/profile_screen.dart
+++ b/lib/screens/profile_screen.dart
@@ -1,15 +1,25 @@
+// lib/screens/profile_screen.dart
+
 import 'package:flutter/material.dart';
+import 'package:flutter_riverpod/flutter_riverpod.dart'; // YENİ: import
 import 'package:neyese4/core/theme/app_text_styles.dart';
+import 'package:neyese4/features/profile/application/xp_provider.dart'; // YENİ: import
 import 'package:neyese4/screens/diet_selection_screen.dart';
-import 'package:neyese4/screens/intolerance_selection_screen.dart';
-// YENİ: Mutfak aletleri seçim sayfasını import ediyoruz.
 import 'package:neyese4/screens/equipment_selection_screen.dart';
+import 'package:neyese4/screens/intolerance_selection_screen.dart';
+
+import '../core/theme/app_colors.dart';
 
-class ProfileScreen extends StatelessWidget {
+// GÜNCELLENDİ: StatelessWidget -> ConsumerWidget
+class ProfileScreen extends ConsumerWidget {
   const ProfileScreen({super.key});
 
   @override
-  Widget build(BuildContext context) {
+  // GÜNCELLENDİ: build metoduna WidgetRef eklendi
+  Widget build(BuildContext context, WidgetRef ref) {
+    // YENİ: XP provider'ını dinliyoruz.
+    final userXp = ref.watch(userXpProvider);
+
     return Scaffold(
       appBar: AppBar(
         title: const Text('Profilim ve Ayarlar'),
@@ -18,6 +28,18 @@ class ProfileScreen extends StatelessWidget {
       body: ListView(
         padding: const EdgeInsets.all(16.0),
         children: [
+          // YENİ: XP Puanını gösteren kart
+          Card(
+            elevation: 2,
+            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
+            child: ListTile(
+              leading: const Icon(Icons.star_rounded, color: Colors.amber, size: 32),
+              title: Text('Deneyim Puanı (XP)', style: AppTextStyles.body.copyWith(fontWeight: FontWeight.bold)),
+              trailing: Text('$userXp XP', style: AppTextStyles.h2.copyWith(color: AppColors.primaryAction)),
+            ),
+          ),
+          const SizedBox(height: 16),
+          // Kalan kısım aynı
           _buildProfileOption(
             icon: Icons.restaurant_menu_outlined,
             title: 'Diyet Tercihleri',
@@ -45,7 +67,6 @@ class ProfileScreen extends StatelessWidget {
             title: 'Mutfak Aletleri',
             subtitle: 'Fırın, Mikser, Airfryer...',
             onTap: () {
-              // GÜNCELLENDİ: Mutfak aletleri seçim sayfasına yönlendirme.
               Navigator.of(context).push(
                 MaterialPageRoute(builder: (context) => const EquipmentSelectionScreen()),
               );
@@ -56,9 +77,7 @@ class ProfileScreen extends StatelessWidget {
             icon: Icons.info_outline,
             title: 'Uygulama Hakkında',
             subtitle: 'Versiyon 1.0.0',
-            onTap: () {
-              // TODO: Hakkında sayfası açılacak.
-            },
+            onTap: () {},
           ),
         ],
       ),
@@ -79,4 +98,4 @@ class ProfileScreen extends StatelessWidget {
       onTap: onTap,
     );
   }
-}
+}
\ No newline at end of file
diff --git a/lib/screens/recipes_screen.dart b/lib/screens/recipes_screen.dart
index f1f8726..7afda19 100644
--- a/lib/screens/recipes_screen.dart
+++ b/lib/screens/recipes_screen.dart
@@ -1,9 +1,11 @@
-import 'package:flutter/foundation.dart';
+// lib/screens/recipes_screen.dart
+
 import 'package:flutter/material.dart';
 import 'package:flutter_riverpod/flutter_riverpod.dart';
 import 'package:neyese4/core/theme/app_text_styles.dart';
+import 'package:neyese4/data/models/recipe_suggestion.dart';
 import 'package:neyese4/data/providers.dart';
-import 'package:neyese4/features/recipe_finder/presentation/screens/recipe_detail_screen.dart';
+import 'package:neyese4/features/recipe_finder/presentation/widgets/recipe_card.dart'; // Yeni kartımızı import ediyoruz
 
 class RecipesScreen extends ConsumerWidget {
   const RecipesScreen({super.key});
@@ -11,47 +13,45 @@ class RecipesScreen extends ConsumerWidget {
   @override
   Widget build(BuildContext context, WidgetRef ref) {
     final savedRecipes = ref.watch(savedRecipesListProvider);
+
     return Scaffold(
       appBar: AppBar(title: const Text('Kaydedilen Tariflerim')),
       body: savedRecipes.isEmpty
-          ? Center(
+          ? Center( // Boş durum için daha şık bir arayüz
         child: Padding(
           padding: const EdgeInsets.all(24.0),
           child: Column(
             mainAxisAlignment: MainAxisAlignment.center,
             children: [
-              Icon(Icons.bookmark_remove_outlined, size: 80, color: Colors.grey[400]),
-              const SizedBox(height: 16),
-              const Text('Henüz tarif kaydetmedin', style: AppTextStyles.h2, textAlign: TextAlign.center),
+              Icon(Icons.bookmark_remove_outlined, size: 100, color: Colors.grey[300]),
+              const SizedBox(height: 24),
+              const Text('Henüz Tarif Kaydetmedin', style: AppTextStyles.h2, textAlign: TextAlign.center),
               const SizedBox(height: 8),
-              Text('Beğendiğin tariflerin detay sayfasındaki yer imi ikonuna dokunarak onları buraya ekleyebilirsin.', style: AppTextStyles.body.copyWith(color: Colors.grey[600]), textAlign: TextAlign.center),
+              Text(
+                'Beğendiğin tariflerin detay sayfasındaki yer imi ikonuna dokunarak onları buraya ekleyebilirsin.',
+                style: AppTextStyles.body.copyWith(color: Colors.grey[600]),
+                textAlign: TextAlign.center,
+              ),
             ],
           ),
         ),
       )
-          : ListView.builder(
+          : GridView.builder( // ListView yerine GridView kullanıyoruz
+        padding: const EdgeInsets.all(16),
+        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
+          crossAxisCount: 2, // Yan yana 2 kart
+          crossAxisSpacing: 16, // Yatay boşluk
+          mainAxisSpacing: 16, // Dikey boşluk
+          childAspectRatio: 0.75, // Kartların en-boy oranı
+        ),
         itemCount: savedRecipes.length,
         itemBuilder: (context, index) {
-          final recipe = savedRecipes[index];
-          final imageUrl = kIsWeb ? 'https://api.allorigins.win/raw?url=${Uri.encodeComponent(recipe.image)}' : recipe.image;
-
-          return ListTile(
-            leading: ClipRRect(
-              borderRadius: BorderRadius.circular(8.0),
-              child: Image.network(
-                imageUrl,
-                width: 56,
-                height: 56,
-                fit: BoxFit.cover,
-                errorBuilder: (context, error, stackTrace) => const Icon(Icons.image_not_supported_outlined, size: 56, color: Colors.grey),
-              ),
-            ),
-            title: Text(recipe.title, style: AppTextStyles.body),
-            trailing: const Icon(Icons.arrow_forward_ios, size: 16),
-            onTap: () => Navigator.of(context).push(MaterialPageRoute(builder: (context) => RecipeDetailScreen(recipeId: recipe.id))),
+          final recipe = savedRecipes.reversed.toList()[index];
+          return RecipeCard( // Yeniden kullanılabilir kartımızı çağırıyoruz
+            recipe: RecipeSuggestion(id: recipe.id, title: recipe.title, image: recipe.image),
           );
         },
       ),
     );
   }
-}
+}
\ No newline at end of file
diff --git a/linux/flutter/generated_plugin_registrant.cc b/linux/flutter/generated_plugin_registrant.cc
index e71a16d..64a0ece 100644
--- a/linux/flutter/generated_plugin_registrant.cc
+++ b/linux/flutter/generated_plugin_registrant.cc
@@ -6,6 +6,10 @@
 
 #include "generated_plugin_registrant.h"
 
+#include <file_selector_linux/file_selector_plugin.h>
 
 void fl_register_plugins(FlPluginRegistry* registry) {
+  g_autoptr(FlPluginRegistrar) file_selector_linux_registrar =
+      fl_plugin_registry_get_registrar_for_plugin(registry, "FileSelectorPlugin");
+  file_selector_plugin_register_with_registrar(file_selector_linux_registrar);
 }
diff --git a/linux/flutter/generated_plugins.cmake b/linux/flutter/generated_plugins.cmake
index 2e1de87..2db3c22 100644
--- a/linux/flutter/generated_plugins.cmake
+++ b/linux/flutter/generated_plugins.cmake
@@ -3,6 +3,7 @@
 #
 
 list(APPEND FLUTTER_PLUGIN_LIST
+  file_selector_linux
 )
 
 list(APPEND FLUTTER_FFI_PLUGIN_LIST
diff --git a/macos/Flutter/GeneratedPluginRegistrant.swift b/macos/Flutter/GeneratedPluginRegistrant.swift
index e777c67..66c184f 100644
--- a/macos/Flutter/GeneratedPluginRegistrant.swift
+++ b/macos/Flutter/GeneratedPluginRegistrant.swift
@@ -5,8 +5,12 @@
 import FlutterMacOS
 import Foundation
 
+import file_selector_macos
+import mobile_scanner
 import path_provider_foundation
 
 func RegisterGeneratedPlugins(registry: FlutterPluginRegistry) {
+  FileSelectorPlugin.register(with: registry.registrar(forPlugin: "FileSelectorPlugin"))
+  MobileScannerPlugin.register(with: registry.registrar(forPlugin: "MobileScannerPlugin"))
   PathProviderPlugin.register(with: registry.registrar(forPlugin: "PathProviderPlugin"))
 }
diff --git a/neyese_updates.patch b/neyese_updates.patch
index 09a67dc..390a803 100644
--- a/neyese_updates.patch
+++ b/neyese_updates.patch
@@ -1,1176 +0,0 @@
-diff --git a/lib/core/api/ai_service.dart b/lib/core/api/ai_service.dart
-index e2395ee..6d4f901 100644
---- a/lib/core/api/ai_service.dart
-+++ b/lib/core/api/ai_service.dart
-@@ -21,13 +21,19 @@ class AiService {
-   Future<EnrichedRecipeContent> getEnrichedRecipeContent(RecipeDetail recipe) async {
-     final prompt =
-         'You are a helpful and creative Turkish chef assistant. '
--        'Take the following recipe and return a JSON object with four keys: "title_tr", "ingredients_tr", "instructions_tr", and "tips_tr".\n'
--        '- "title_tr": Translate the recipe title to Turkish.\n'
--        '- "ingredients_tr": Translate the list of ingredients to Turkish. Return it as a JSON array of strings.\n'
--        '- "instructions_tr": Rewrite the recipe instructions in Turkish for a home cook. Format it as a single string with numbered steps (e.g., "1. Adım: ...\\n2. Adım: ...").\n'
--        '- "tips_tr": Provide 2-3 useful and creative tips related to this recipe as a single string, with each tip starting with a "•" character and separated by a newline.\n\n'
--        'Here is the recipe information:\n'
-+        'Take the following recipe information and return a JSON object with the keys: "turkish_title", "difficulty", "readyInMinutes", "tags", "estimated_nutrition", "required_utensils", "ingredients_tr", "preparation_steps", and "chef_tips".\n'
-+        '- "turkish_title": (string) Translate the recipe title to Turkish.\n'
-+        '- "difficulty": (string) Estimate the difficulty as "Kolay", "Orta", or "Zor".\n'
-+        '- "readyInMinutes": (integer) Use the provided preparation time.\n'
-+        '- "tags": (array of strings) Provide 3-4 relevant Turkish tags (e.g., "akşam yemeği", "tavuklu", "fırında").\n'
-+        '- "estimated_nutrition": (object) Provide estimated values for "Kalori", "Protein", "Yağ", "Karbonhidrat".\n'
-+        '- "required_utensils": (array of strings) List the necessary kitchen utensils in Turkish.\n'
-+        '- "ingredients_tr": (array of objects) Translate the ingredients to Turkish. Each object must have "amount" (double), "unit" (string), and "name" (string).\n'
-+        '- "preparation_steps": (array of objects) Rewrite instructions in Turkish. Each object must have "step_number" (integer) and "description" (string).\n'
-+        '- "chef_tips": (array of strings) Provide 2-3 useful and creative tips in Turkish.\n\n'
-+        'Here is the recipe information to use:\n'
-         'Title: ${recipe.title}\n'
-+        'Ready in Minutes: ${recipe.readyInMinutes}\n'
-         'Ingredients List: ${recipe.extendedIngredients.map((e) => e.original).toList()}\n'
-         'Instructions: ${recipe.instructions}';
- 
-diff --git a/lib/core/api/dio_client.dart b/lib/core/api/dio_client.dart
-index 67fe63b..94bae65 100644
---- a/lib/core/api/dio_client.dart
-+++ b/lib/core/api/dio_client.dart
-@@ -18,7 +18,7 @@ class DioClient {
- 
-     // Anahtarın .env dosyasında bulunduğundan emin olalım.
-     if (apiKey == null) {
--      throw Exception("SPOONACULAR_API_KEY .env dosyasında bulunamadı!");
-+      throw Exception("SPOONACULAR_API_KEY .env dosyasında bulunamadıysa!");
-     }
- 
-     // 3. _dio nesnesini burada, constructor içinde oluşturuyoruz.
-diff --git a/lib/data/models/enriched_recipe_content.dart b/lib/data/models/enriched_recipe_content.dart
-index 9aadad1..8935d38 100644
---- a/lib/data/models/enriched_recipe_content.dart
-+++ b/lib/data/models/enriched_recipe_content.dart
-@@ -1,29 +1,52 @@
--// Bu basit sınıf, Gemini'den gelen yapılandırılmış veriyi tutar.
-+// lib/data/models/enriched_recipe_content.dart
-+
-+import 'package:neyese4/data/models/ingredient_info.dart';
-+import 'package:neyese4/data/models/preparation_step.dart';
-+
- class EnrichedRecipeContent {
-+  final String imageUrl; // YENİ EKLENDİ
-   final String title;
--  final List<String> ingredients;
--  final String instructions;
--  final String tips; // Püf noktaları için ayrı bir alan
-+  final String difficulty;
-+  final List<String> tags;
-+  final Map<String, String> estimatedNutrition;
-+  final List<String> requiredUtensils;
-+  final List<IngredientInfo> ingredients;
-+  final List<PreparationStep> preparationSteps;
-+  final List<String> chefTips;
-+  final int readyInMinutes;
- 
-   EnrichedRecipeContent({
-+    required this.imageUrl, // YENİ EKLENDİ
-     required this.title,
-+    required this.difficulty,
-+    required this.tags,
-+    required this.estimatedNutrition,
-+    required this.requiredUtensils,
-     required this.ingredients,
--    required this.instructions,
--    required this.tips,
-+    required this.preparationSteps,
-+    required this.chefTips,
-+    required this.readyInMinutes,
-   });
- 
--  // Gelen JSON'ı bu nesneye çevirmek için bir fabrika metodu.
-+  // Not: fromJson metodunu DEĞİŞTİRMİYORUZ çünkü imageUrl AI'dan gelmeyecek.
-   factory EnrichedRecipeContent.fromJson(Map<String, dynamic> json) {
--    // Malzeme listesinin doğru şekilde parse edildiğinden emin oluyoruz.
--    final ingredientsList = (json['ingredients_tr'] as List<dynamic>?)
--        ?.map((e) => e.toString())
--        .toList() ?? [];
--
-     return EnrichedRecipeContent(
--      title: json['title_tr'] as String? ?? 'Başlık Çevrilemedi',
--      ingredients: ingredientsList,
--      instructions: json['instructions_tr'] as String? ?? 'Talimatlar zenginleştirilemedi.',
--      tips: json['tips_tr'] as String? ?? '', // Püf noktalarını alıyoruz.
-+      imageUrl: '', // Burası provider içinde doldurulacağı için boş kalabilir.
-+      title: json['turkish_title'] as String? ?? 'Başlık Yok',
-+      difficulty: json['difficulty'] as String? ?? 'Belirtilmemiş',
-+      readyInMinutes: json['readyInMinutes'] as int? ?? 0,
-+      tags: (json['tags'] as List<dynamic>?)?.map((e) => e.toString()).toList() ?? [],
-+      estimatedNutrition: (json['estimated_nutrition'] as Map<String, dynamic>?)
-+          ?.map((key, value) => MapEntry(key, value.toString())) ?? {},
-+      requiredUtensils: (json['required_utensils'] as List<dynamic>?)
-+          ?.map((e) => e.toString()).toList() ?? [],
-+      ingredients: (json['ingredients_tr'] as List<dynamic>?)
-+          ?.map((item) => IngredientInfo.fromJson(item as Map<String, dynamic>))
-+          .toList() ?? [],
-+      preparationSteps: (json['preparation_steps'] as List<dynamic>?)
-+          ?.map((item) => PreparationStep.fromJson(item as Map<String, dynamic>))
-+          .toList() ?? [],
-+      chefTips: (json['chef_tips'] as List<dynamic>?)?.map((e) => e.toString()).toList() ?? [],
-     );
-   }
--}
-+}
-\ No newline at end of file
-diff --git a/lib/data/models/ingredient_info.dart b/lib/data/models/ingredient_info.dart
-index e69de29..af88e3f 100644
---- a/lib/data/models/ingredient_info.dart
-+++ b/lib/data/models/ingredient_info.dart
-@@ -0,0 +1,23 @@
-+// lib/data/models/ingredient_info.dart
-+
-+class IngredientInfo {
-+  final double amount;
-+  final String unit;
-+  final String name;
-+
-+  IngredientInfo({
-+    required this.amount,
-+    required this.unit,
-+    required this.name,
-+  });
-+
-+  // YENİ EKLENDİ: fromJson metodu
-+  factory IngredientInfo.fromJson(Map<String, dynamic> json) {
-+    return IngredientInfo(
-+      // num olarak gelen veriyi double'a çeviriyoruz.
-+      amount: (json['amount'] as num?)?.toDouble() ?? 0.0,
-+      unit: json['unit'] as String? ?? '',
-+      name: json['name'] as String? ?? 'Bilinmeyen Malzeme',
-+    );
-+  }
-+}
-\ No newline at end of file
-diff --git a/lib/data/models/preparation_step.dart b/lib/data/models/preparation_step.dart
-index e69de29..73fec83 100644
---- a/lib/data/models/preparation_step.dart
-+++ b/lib/data/models/preparation_step.dart
-@@ -0,0 +1,22 @@
-+// lib/data/models/preparation_step.dart
-+
-+class PreparationStep {
-+  final int stepNumber;
-+  final String description;
-+  final String? videoPrompt;
-+
-+  PreparationStep({
-+    required this.stepNumber,
-+    required this.description,
-+    this.videoPrompt,
-+  });
-+
-+  // YENİ EKLENDİ: fromJson metodu
-+  factory PreparationStep.fromJson(Map<String, dynamic> json) {
-+    return PreparationStep(
-+      stepNumber: json['step_number'] as int? ?? 0,
-+      description: json['description'] as String? ?? 'Adım açıklaması yok.',
-+      videoPrompt: json['video_prompt'] as String?,
-+    );
-+  }
-+}
-\ No newline at end of file
-diff --git a/lib/features/recipe_finder/application/mock_recipe_data.dart b/lib/features/recipe_finder/application/mock_recipe_data.dart
-index e69de29..2998de9 100644
---- a/lib/features/recipe_finder/application/mock_recipe_data.dart
-+++ b/lib/features/recipe_finder/application/mock_recipe_data.dart
-@@ -0,0 +1,64 @@
-+// lib/features/recipe_finder/application/mock_recipe_data.dart
-+
-+import 'package:neyese4/data/models/enriched_recipe_content.dart';
-+import 'package:neyese4/data/models/ingredient_info.dart';
-+import 'package:neyese4/data/models/preparation_step.dart';
-+
-+// Arayüz geliştirirken kullanacağımız sahte, zenginleştirilmiş tarif verisi.
-+final mockEnrichedRecipeContent = EnrichedRecipeContent(
-+  // YENİ EKLENDİ: Eksik olan zorunlu alan
-+  imageUrl: 'https://i.lezzet.com.tr/images-xxlarge-secondary/ev-yapimi-iskender-nasil-yapilir-22248768-4934-4217-a146-8323894814a5.jpg',
-+
-+  title: "Ev Yapımı İskender Kebap",
-+  difficulty: "Orta",
-+  readyInMinutes: 45,
-+  tags: ["türk mutfağı", "ana yemek", "et", "yoğurtlu"],
-+  estimatedNutrition: {
-+    "Kalori": "650 kcal",
-+    "Protein": "45 g",
-+    "Yağ": "35 g",
-+    "Karbonhidrat": "40 g",
-+  },
-+  requiredUtensils: [
-+    "Geniş bir tava",
-+    "Servis tabağı",
-+    "Bıçak",
-+    "Sos tavası",
-+  ],
-+  ingredients: [
-+    IngredientInfo(amount: 500, unit: "g", name: "dana bonfile"),
-+    IngredientInfo(amount: 2, unit: "adet", name: "tırnak pide"),
-+    IngredientInfo(amount: 3, unit: "yemek kaşığı", name: "tereyağı"),
-+    IngredientInfo(amount: 1, unit: "yemek kaşığı", name: "domates salçası"),
-+    IngredientInfo(amount: 1, unit: "su bardağı", name: "süzme yoğurt"),
-+    IngredientInfo(amount: 2, unit: "adet", name: "domates"),
-+    IngredientInfo(amount: 4, unit: "adet", name: "sivri biber"),
-+  ],
-+  preparationSteps: [
-+    PreparationStep(
-+        stepNumber: 1,
-+        description: "Tırnak pideleri küp küp doğrayın ve servis tabağının tabanına yayın. Üzerine hafifçe ısıtılmış süzme yoğurdu gezdirin.",
-+        videoPrompt: "Hands dicing turkish pide bread into cubes and spreading them on a white plate. A spoon drizzling yogurt over the bread."
-+    ),
-+    PreparationStep(
-+        stepNumber: 2,
-+        description: "Geniş bir tavada etleri yüksek ateşte mühürleyin. Ayrı bir sos tavasında 2 yemek kaşığı tereyağını eritin ve salçayı kavurun. Az su ekleyerek sos kıvamına getirin.",
-+        videoPrompt: "Close-up shot of beef strips searing in a hot pan. A separate small pan with butter melting and tomato paste being stirred in."
-+    ),
-+    PreparationStep(
-+        stepNumber: 3,
-+        description: "Mühürlenmiş etleri yoğurtlu pidelerin üzerine yerleştirin. Hazırladığınız salçalı sosu etlerin üzerine gezdirin. Yanına közlenmiş domates ve biber ekleyin.",
-+        videoPrompt: "Placing the cooked beef over the yogurt and bread. Pouring the red tomato sauce over the beef. Placing grilled tomatoes and peppers on the side."
-+    ),
-+    PreparationStep(
-+        stepNumber: 4,
-+        description: "Kalan 1 yemek kaşığı tereyağını kızdırıp tabağın üzerinde gezdirerek cızırtılı bir sesle servis edin. Afiyet olsun!",
-+        videoPrompt: "Pouring sizzling hot melted butter from a small pan over the final Iskender dish, creating steam and a sizzling sound."
-+    ),
-+  ],
-+  chefTips: [
-+    "En iyi lezzet için mutlaka süzme yoğurt kullanın.",
-+    "Tereyağını yakmamaya özen gösterin, sadece kızdırmanız yeterli.",
-+    "Etleri çok ince yapraklar halinde kesmek, lezzeti artıracaktır."
-+  ],
-+);
-\ No newline at end of file
-diff --git a/lib/features/recipe_finder/application/recipe_providers.dart b/lib/features/recipe_finder/application/recipe_providers.dart
-index a210d7d..a840d68 100644
---- a/lib/features/recipe_finder/application/recipe_providers.dart
-+++ b/lib/features/recipe_finder/application/recipe_providers.dart
-@@ -1,31 +1,18 @@
-+// lib/features/recipe_finder/application/recipe_providers.dart
-+
- import 'package:flutter_riverpod/flutter_riverpod.dart';
- import 'package:neyese4/data/models/enriched_recipe_content.dart';
--import 'package:neyese4/data/models/recipe_detail.dart';
- import 'package:neyese4/data/models/recipe_suggestion.dart';
- import 'package:neyese4/data/models/user_preferences.dart';
- import 'package:neyese4/data/providers.dart';
- import 'package:neyese4/features/recipe_finder/application/search_query.dart';
- 
--// Günün önerileri için
-+// --- ARAMA VE ÖNERİ PROVIDER'LARI (Değişiklik yok) ---
- final randomRecipesProvider = FutureProvider.autoDispose<List<RecipeSuggestion>>((ref) {
-   final recipeRepository = ref.watch(recipeRepositoryProvider);
-   return recipeRepository.getRandomRecipes();
- });
- 
--// Ham tarif detayını API'den çekmek için
--final recipeDetailProvider = FutureProvider.autoDispose.family<RecipeDetail, int>((ref, recipeId) {
--  final recipeRepository = ref.watch(recipeRepositoryProvider);
--  return recipeRepository.getRecipeDetailById(recipeId);
--});
--
--// Bir tarifin kayıtlı olup olmadığını kontrol etmek için
--final isRecipeSavedProvider = Provider.autoDispose.family<bool, int>((ref, recipeId) {
--  ref.watch(savedRecipesStreamProvider);
--  final repository = ref.watch(savedRecipeRepositoryProvider);
--  return repository.isRecipeSaved(recipeId);
--});
--
--// Malzemelere ve profil ayarlarına göre arama yapmak için
- final recipesByIngredientsProvider =
- FutureProvider.autoDispose.family<List<RecipeSuggestion>, SearchQuery>((ref, query) {
-   if (query.ingredients.isEmpty) {
-@@ -34,13 +21,48 @@ FutureProvider.autoDispose.family<List<RecipeSuggestion>, SearchQuery>((ref, que
-   final recipeRepository = ref.watch(recipeRepositoryProvider);
-   return recipeRepository.findRecipesByIngredients(
-     query.ingredients,
--    UserPreferences(diet: query.diet, intolerances: query.intolerances, equipment: query.equipment),
-+    UserPreferences(diet: query.diet, intolerances: query.intolerances),
-   );
- });
- 
--// DÜZENLENDİ: Bu provider artık ham tarifi alıp AI servisine göndererek zenginleştirilmiş içeriği getirir.
--final enrichedRecipeProvider =
--FutureProvider.autoDispose.family<EnrichedRecipeContent, RecipeDetail>((ref, recipe) {
-+
-+// --- TARİF DETAY SAYFASI İÇİN YENİ PROVIDER'LAR ---
-+
-+// 1. Temel tarifi Spoonacular'dan çeken provider (dahili kullanım için)
-+final _recipeDetailProvider = FutureProvider.autoDispose.family((ref, int recipeId) {
-+  final recipeRepository = ref.watch(recipeRepositoryProvider);
-+  return recipeRepository.getRecipeDetailById(recipeId);
-+});
-+
-+// 2. Spoonacular'dan tarifi alıp Gemini ile zenginleştiren BİRLEŞİK provider
-+// Arayüzümüz sadece bu provider'ı kullanacak.
-+final fullRecipeProvider = FutureProvider.autoDispose.family<EnrichedRecipeContent, int>((ref, recipeId) async {
-+  // Önce temel tarifi al
-+  final baseRecipe = await ref.watch(_recipeDetailProvider(recipeId).future);
-+
-+  // Sonra bu tarifi AI servisine gönderip zenginleştirilmiş halini al
-   final aiService = ref.watch(aiServiceProvider);
--  return aiService.getEnrichedRecipeContent(recipe);
-+  final enrichedContentFromAI = await aiService.getEnrichedRecipeContent(baseRecipe);
-+
-+
-+  return EnrichedRecipeContent(
-+    imageUrl: baseRecipe.image, // Spoonacular'dan gelen orijinal resim URL'si
-+    title: enrichedContentFromAI.title,
-+    difficulty: enrichedContentFromAI.difficulty,
-+    readyInMinutes: enrichedContentFromAI.readyInMinutes,
-+    tags: enrichedContentFromAI.tags,
-+    estimatedNutrition: enrichedContentFromAI.estimatedNutrition,
-+    requiredUtensils: enrichedContentFromAI.requiredUtensils,
-+    ingredients: enrichedContentFromAI.ingredients,
-+    preparationSteps: enrichedContentFromAI.preparationSteps,
-+    chefTips: enrichedContentFromAI.chefTips,
-+  );
- });
-+
-+
-+// 3. Bir tarifin kaydedilip kaydedilmediğini kontrol eden provider (Değişiklik yok)
-+final isRecipeSavedProvider = Provider.autoDispose.family<bool, int>((ref, recipeId) {
-+  ref.watch(savedRecipesStreamProvider);
-+  final repository = ref.watch(savedRecipeRepositoryProvider);
-+  return repository.isRecipeSaved(recipeId);
-+});
-\ No newline at end of file
-diff --git a/lib/features/recipe_finder/presentation/screens/recipe_detail_screen.dart b/lib/features/recipe_finder/presentation/screens/recipe_detail_screen.dart
-index 806aca1..e3b265e 100644
---- a/lib/features/recipe_finder/presentation/screens/recipe_detail_screen.dart
-+++ b/lib/features/recipe_finder/presentation/screens/recipe_detail_screen.dart
-@@ -1,164 +1,124 @@
--import 'package:flutter/foundation.dart';
-+// lib/features/recipe_finder/presentation/screens/recipe_detail_screen.dart
-+
- import 'package:flutter/material.dart';
- import 'package:flutter_riverpod/flutter_riverpod.dart';
- import 'package:neyese4/core/theme/app_colors.dart';
- import 'package:neyese4/core/theme/app_text_styles.dart';
--import 'package:neyese4/data/models/recipe_detail.dart';
- import 'package:neyese4/data/models/saved_recipe.dart';
- import 'package:neyese4/data/providers.dart';
- import 'package:neyese4/features/recipe_finder/application/recipe_providers.dart';
-+// Widget'larımızı import ediyoruz
-+import 'package:neyese4/features/recipe_finder/presentation/widgets/chef_tips_card.dart';
-+import 'package:neyese4/features/recipe_finder/presentation/widgets/ingredients_card.dart';
-+import 'package:neyese4/features/recipe_finder/presentation/widgets/nutrition_card.dart';
-+import 'package:neyese4/features/recipe_finder/presentation/widgets/preparation_steps_card.dart';
-+import 'package:neyese4/features/recipe_finder/presentation/widgets/recipe_title_and_meta_card.dart';
-+import 'package:neyese4/features/recipe_finder/presentation/widgets/utensils_card.dart';
-+import 'package:flutter/foundation.dart'; // Web kontrolü için bu importu ekleyin
- 
-+// Widget'ımızı tekrar ConsumerWidget'a çeviriyoruz.
- class RecipeDetailScreen extends ConsumerWidget {
-   final int recipeId;
-   const RecipeDetailScreen({super.key, required this.recipeId});
- 
-   @override
-   Widget build(BuildContext context, WidgetRef ref) {
--    final recipeDetailAsyncValue = ref.watch(recipeDetailProvider(recipeId));
-+    // Yeni birleşik provider'ımızı dinliyoruz.
-+    final recipeAsyncValue = ref.watch(fullRecipeProvider(recipeId));
- 
-     return Scaffold(
-       backgroundColor: AppColors.background,
--      body: recipeDetailAsyncValue.when(
-+      // Gelen verinin durumuna göre (yükleniyor, hata, başarılı) farklı arayüzler gösteriyoruz.
-+      body: recipeAsyncValue.when(
-         loading: () => const Center(child: CircularProgressIndicator()),
--        error: (err, stack) => Center(child: Text('Tarif yüklenemedi: $err')),
--        data: (recipe) {
--          final enrichedContentAsyncValue = ref.watch(enrichedRecipeProvider(recipe));
-+        error: (err, stack) => Center(
-+          child: Padding(
-+            padding: const EdgeInsets.all(20.0),
-+            child: Text('Tarif yüklenemedi.\nLütfen internet bağlantınızı kontrol edin.\nHata: $err', textAlign: TextAlign.center),
-+          ),
-+        ),
-+        data: (content) {
-+          // Veri başarıyla geldiğinde, daha önce tasarladığımız arayüzü gösteriyoruz.
-           final isSaved = ref.watch(isRecipeSavedProvider(recipeId));
--          final imageUrl = kIsWeb ? 'https://api.allorigins.win/raw?url=${Uri.encodeComponent(recipe.image)}' : recipe.image;
-+          const double cardSpacing = 24.0;
- 
-           return CustomScrollView(
-             slivers: [
-               SliverAppBar(
--                surfaceTintColor: Colors.transparent,
-                 expandedHeight: 250.0,
-                 pinned: true,
--                title: enrichedContentAsyncValue.when(
--                  data: (content) => Text(content.title, maxLines: 1, overflow: TextOverflow.ellipsis),
--                  loading: () => Text(recipe.title, maxLines: 1, overflow: TextOverflow.ellipsis),
--                  error: (_, __) => Text(recipe.title, maxLines: 1, overflow: TextOverflow.ellipsis),
-+                flexibleSpace: FlexibleSpaceBar(
-+                  title: Text(
-+                    content.title,
-+                    style: const TextStyle(
-+                        fontSize: 16,
-+                        shadows: [Shadow(color: Colors.black54, blurRadius: 8, offset: Offset(0, 1))]),
-+                  ),
-+                  background: Image.network(
-+                    // Web'de CORS hatası almamak için proxy kullanıyoruz.
-+                    kIsWeb
-+                        ? 'https://api.allorigins.win/raw?url=${Uri.encodeComponent(content.imageUrl)}'
-+                        : content.imageUrl,
-+                    fit: BoxFit.cover,
-+                    errorBuilder: (c, e, s) => const Icon(Icons.error),
-+                  ),
-                 ),
--                centerTitle: false,
-                 actions: [
-+                  // Kaydetme butonunu tekrar aktif hale getiriyoruz
-                   IconButton(
-                     icon: Icon(isSaved ? Icons.bookmark : Icons.bookmark_border_outlined, color: isSaved ? AppColors.primaryAction : null),
--                    onPressed: () async {
--                      final savedRecipeRepository = ref.read(savedRecipeRepositoryProvider);
-+                    onPressed: () {
-+                      final repository = ref.read(savedRecipeRepositoryProvider);
-                       if (isSaved) {
--                        await savedRecipeRepository.deleteRecipe(recipeId);
-+                        repository.deleteRecipe(recipeId);
-                       } else {
--                        await savedRecipeRepository.saveRecipe(SavedRecipe(id: recipe.id, title: recipe.title, image: recipe.image));
--                      }
-+                        // Not: image URL'i şu an mock datadan değil, AI cevabından gelmiyor.
-+                        // Şimdilik sabit bir URL kullanabiliriz veya Spoonacular'dan gelen orijinali kullanabiliriz.
-+                        // Bu özellik daha sonra geliştirilebilir.
-+                        repository.saveRecipe(SavedRecipe(id: recipeId, title: content.title, image: content.imageUrl));                      }
-                     },
-                   ),
-                 ],
--                flexibleSpace: FlexibleSpaceBar(
--                  background: Image.network(imageUrl, fit: BoxFit.cover, errorBuilder: (c, e, s) => const Icon(Icons.error)),
--                ),
-               ),
--              SliverToBoxAdapter(
--                child: Padding(
--                    padding: const EdgeInsets.all(16.0),
--                    child: enrichedContentAsyncValue.when(
--                      loading: () => const Center(heightFactor: 5, child: CircularProgressIndicator()),
--                      error: (err, stack) => Center(child: Text('Tarif içeriği yüklenemedi: $err', style: const TextStyle(color: Colors.red))),
--                      data: (content) {
--                        // YENİ VE ŞIK ARAYÜZ
--                        return Column(
--                          crossAxisAlignment: CrossAxisAlignment.start,
--                          children: [
--                            // Başlık ve Özet Bilgiler
--                            Text(content.title, style: AppTextStyles.h1),
--                            const SizedBox(height: 16),
--                            Row(
--                              children: [
--                                _buildInfoChip(Icons.timer_outlined, '${recipe.readyInMinutes} dk'),
--                                const SizedBox(width: 8),
--                                _buildInfoChip(Icons.food_bank_outlined, '${content.ingredients.length} malzeme'),
--                              ],
--                            ),
--                            const SizedBox(height: 24),
--
--                            // Malzemeler Bölümü
--                            const Text('Malzemeler', style: AppTextStyles.h2),
--                            const SizedBox(height: 12),
--                            Container(
--                              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
--                              decoration: BoxDecoration(
--                                  color: Colors.white,
--                                  borderRadius: BorderRadius.circular(12),
--                                  border: Border.all(color: Colors.grey.shade200)),
--                              child: Column(
--                                crossAxisAlignment: CrossAxisAlignment.start,
--                                children: content.ingredients
--                                    .map((ingredient) => Padding(
--                                  padding: const EdgeInsets.symmetric(vertical: 4.0),
--                                  child: Text('• $ingredient', style: AppTextStyles.body),
--                                ))
--                                    .toList(),
--                              ),
--                            ),
--                            const SizedBox(height: 24),
--
--                            // Hazırlanışı Bölümü
--                            const Text('Hazırlanışı', style: AppTextStyles.h2),
--                            const SizedBox(height: 12),
--                            Text(
--                              content.instructions,
--                              style: AppTextStyles.body.copyWith(height: 1.6, fontSize: 17),
--                            ),
--
--                            // Püf Noktaları Bölümü (Eğer varsa)
--                            if (content.tips.isNotEmpty) ...[
--                              const SizedBox(height: 24),
--                              const Text('Püf Noktaları', style: AppTextStyles.h2),
--                              const SizedBox(height: 12),
--                              Container(
--                                padding: const EdgeInsets.all(16),
--                                decoration: BoxDecoration(
--                                  color: AppColors.primaryAction.withOpacity(0.05),
--                                  borderRadius: BorderRadius.circular(12),
--                                ),
--                                child: Text(
--                                    content.tips,
--                                    style: AppTextStyles.body.copyWith(height: 1.5, fontStyle: FontStyle.italic)
--                                ),
--                              )
--                            ],
--
--                            const SizedBox(height: 40),
--                            SizedBox(
--                              width: double.infinity,
--                              child: ElevatedButton.icon(
--                                icon: const Icon(Icons.play_arrow_rounded, color: Colors.white),
--                                onPressed: () {
--                                  // TODO: İnteraktif Pişirme Modu sayfası açılacak.
--                                },
--                                style: ElevatedButton.styleFrom(
--                                  backgroundColor: AppColors.accent,
--                                  padding: const EdgeInsets.symmetric(vertical: 16),
--                                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
--                                ),
--                                label: const Text('Tarifi Yapmaya Başla', style: AppTextStyles.button),
--                              ),
--                            ),
--                          ],
--                        );
--                      },
--                    )
-+              SliverPadding(
-+                padding: const EdgeInsets.all(16.0),
-+                sliver: SliverList(
-+                  delegate: SliverChildListDelegate(
-+                    [
-+                      RecipeTitleAndMetaCard(content: content),
-+                      const SizedBox(height: cardSpacing),
-+                      IngredientsCard(content: content),
-+                      const SizedBox(height: cardSpacing),
-+                      UtensilsCard(content: content),
-+                      const SizedBox(height: cardSpacing),
-+                      PreparationStepsCard(content: content),
-+                      const SizedBox(height: cardSpacing),
-+                      ChefTipsCard(content: content),
-+                      const SizedBox(height: cardSpacing),
-+                      NutritionCard(content: content),
-+                      const SizedBox(height: cardSpacing + 20),
-+                    ],
-+                  ),
-                 ),
-               ),
-             ],
-           );
-         },
-       ),
-+      // Butonun görünürlüğü veri yüklendiğinde sağlanır.
-+      bottomNavigationBar: recipeAsyncValue.hasValue ? Padding(
-+        padding: const EdgeInsets.all(16.0),
-+        child: ElevatedButton.icon(
-+          icon: const Icon(Icons.play_arrow_rounded, color: Colors.white),
-+          onPressed: () {},
-+          style: ElevatedButton.styleFrom(
-+            backgroundColor: AppColors.accent,
-+            padding: const EdgeInsets.symmetric(vertical: 16),
-+            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
-+          ),
-+          label: const Text('Tarifi Yapmaya Başla', style: AppTextStyles.button),
-+        ),
-+      ) : null,
-     );
-   }
--
--  Widget _buildInfoChip(IconData icon, String label) => Chip(
--    avatar: Icon(icon, color: AppColors.primaryAction, size: 20),
--    label: Text(label, style: AppTextStyles.body),
--    backgroundColor: AppColors.primaryAction.withOpacity(0.1),
--    side: BorderSide.none,
--    padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
--  );
--}
-+}
-\ No newline at end of file
-diff --git a/lib/features/recipe_finder/presentation/widgets/chef_tips_card.dart b/lib/features/recipe_finder/presentation/widgets/chef_tips_card.dart
-index e69de29..ad0c6c7 100644
---- a/lib/features/recipe_finder/presentation/widgets/chef_tips_card.dart
-+++ b/lib/features/recipe_finder/presentation/widgets/chef_tips_card.dart
-@@ -0,0 +1,52 @@
-+// lib/features/recipe_finder/presentation/widgets/chef_tips_card.dart
-+
-+import 'package:flutter/material.dart';
-+import 'package:neyese4/core/theme/app_colors.dart';
-+import 'package:neyese4/core/theme/app_text_styles.dart';
-+import 'package:neyese4/data/models/enriched_recipe_content.dart';
-+
-+class ChefTipsCard extends StatelessWidget {
-+  final EnrichedRecipeContent content;
-+  const ChefTipsCard({super.key, required this.content});
-+
-+  @override
-+  Widget build(BuildContext context) {
-+    if (content.chefTips.isEmpty) {
-+      // Eğer püf noktası yoksa, bu kartı hiç gösterme.
-+      return const SizedBox.shrink();
-+    }
-+
-+    return Container(
-+      width: double.infinity,
-+      padding: const EdgeInsets.all(16.0),
-+      decoration: BoxDecoration(
-+        color: AppColors.primaryAction.withOpacity(0.05), // Farklı bir arka plan
-+        borderRadius: BorderRadius.circular(12),
-+        border: Border.all(color: AppColors.primaryAction.withOpacity(0.2)),
-+      ),
-+      child: Column(
-+        crossAxisAlignment: CrossAxisAlignment.start,
-+        children: [
-+          Row(
-+            children: [
-+              const Icon(Icons.lightbulb_outline, color: AppColors.primaryAction),
-+              const SizedBox(width: 8),
-+              Text('Püf Noktaları', style: AppTextStyles.h2),
-+            ],
-+          ),
-+          const SizedBox(height: 16),
-+          ...content.chefTips.map((tip) {
-+            return Padding(
-+              padding: const EdgeInsets.only(bottom: 8.0),
-+              // İtalik ve hafif bir stil ile
-+              child: Text(
-+                '• $tip',
-+                style: AppTextStyles.body.copyWith(fontStyle: FontStyle.italic),
-+              ),
-+            );
-+          }).toList(),
-+        ],
-+      ),
-+    );
-+  }
-+}
-\ No newline at end of file
-diff --git a/lib/features/recipe_finder/presentation/widgets/ingredients_card.dart b/lib/features/recipe_finder/presentation/widgets/ingredients_card.dart
-index e69de29..2173e8f 100644
---- a/lib/features/recipe_finder/presentation/widgets/ingredients_card.dart
-+++ b/lib/features/recipe_finder/presentation/widgets/ingredients_card.dart
-@@ -0,0 +1,175 @@
-+// lib/features/recipe_finder/presentation/widgets/ingredients_card.dart
-+
-+import 'package:flutter/material.dart';
-+import 'package:intl/intl.dart';
-+import 'package:neyese4/core/theme/app_colors.dart';
-+import 'package:neyese4/core/theme/app_text_styles.dart';
-+import 'package:neyese4/data/models/enriched_recipe_content.dart';
-+import 'package:neyese4/data/models/ingredient_info.dart';
-+
-+class IngredientsCard extends StatefulWidget {
-+  final EnrichedRecipeContent content;
-+  const IngredientsCard({super.key, required this.content});
-+
-+  @override
-+  State<IngredientsCard> createState() => _IngredientsCardState();
-+}
-+
-+class _IngredientsCardState extends State<IngredientsCard> {
-+  late int _servings;
-+  final int _originalServings = 2;
-+
-+  // YENİ: İşaretlenmiş malzemelerin adlarını tutacak bir set.
-+  // Set kullanıyoruz çünkü her malzeme sadece bir kez eklenebilir.
-+  final Set<String> _checkedIngredients = {};
-+
-+  @override
-+  void initState() {
-+    super.initState();
-+    _servings = _originalServings;
-+  }
-+
-+  void _incrementServings() {
-+    setState(() {
-+      _servings++;
-+    });
-+  }
-+
-+  void _decrementServings() {
-+    if (_servings > 1) {
-+      setState(() {
-+        _servings--;
-+      });
-+    }
-+  }
-+
-+  @override
-+  Widget build(BuildContext context) {
-+    return _buildStyledCard(
-+      title: 'Malzemeler',
-+      headerAccessory: _buildServingCalculator(),
-+      child: Column(
-+        crossAxisAlignment: CrossAxisAlignment.start,
-+        children: widget.content.ingredients.map((ingredient) {
-+          return _buildIngredientRow(ingredient);
-+        }).toList(),
-+      ),
-+    );
-+  }
-+
-+  Widget _buildServingCalculator() {
-+    return Row(
-+      children: [
-+        IconButton(
-+          onPressed: _decrementServings,
-+          icon: const Icon(Icons.remove_circle_outline),
-+          color: AppColors.neutralGrey,
-+        ),
-+        Text('$_servings Porsiyon', style: AppTextStyles.body.copyWith(fontWeight: FontWeight.bold)),
-+        IconButton(
-+          onPressed: _incrementServings,
-+          icon: const Icon(Icons.add_circle_outline),
-+          color: AppColors.primaryAction,
-+        ),
-+      ],
-+    );
-+  }
-+
-+  // GÜNCELLENDİ: Bu metot artık interaktif bir Checkbox içeriyor.
-+  Widget _buildIngredientRow(IngredientInfo ingredient) {
-+    final newAmount = (ingredient.amount / _originalServings) * _servings;
-+    final NumberFormat numberFormat = NumberFormat("#.##");
-+    final formattedAmount = numberFormat.format(newAmount);
-+
-+    // Bu malzemenin işaretli olup olmadığını kontrol ediyoruz.
-+    final bool isChecked = _checkedIngredients.contains(ingredient.name);
-+
-+    return Padding(
-+      padding: const EdgeInsets.symmetric(vertical: 2.0),
-+      child: InkWell( // Tüm satırı tıklanabilir yapmak için
-+        onTap: () {
-+          setState(() {
-+            if (isChecked) {
-+              _checkedIngredients.remove(ingredient.name);
-+            } else {
-+              _checkedIngredients.add(ingredient.name);
-+            }
-+          });
-+        },
-+        borderRadius: BorderRadius.circular(8),
-+        child: Padding(
-+          padding: const EdgeInsets.symmetric(vertical: 6.0),
-+          child: Row(
-+            children: [
-+              // GÜNCELLENDİ: Artık statik bir ikon yerine interaktif bir Checkbox var.
-+              Checkbox(
-+                value: isChecked,
-+                onChanged: (bool? value) {
-+                  setState(() {
-+                    if (value == true) {
-+                      _checkedIngredients.add(ingredient.name);
-+                    } else {
-+                      _checkedIngredients.remove(ingredient.name);
-+                    }
-+                  });
-+                },
-+                activeColor: AppColors.primaryAction,
-+              ),
-+              const SizedBox(width: 8),
-+              SizedBox(
-+                width: 80,
-+                child: Text(
-+                  '$formattedAmount ${ingredient.unit}',
-+                  style: AppTextStyles.body.copyWith(fontWeight: FontWeight.bold),
-+                ),
-+              ),
-+              Expanded(
-+                child: Text(
-+                  ingredient.name,
-+                  // GÜNCELLENDİ: İşaretliyse metnin üzerini çiziyoruz.
-+                  style: AppTextStyles.body.copyWith(
-+                    decoration: isChecked ? TextDecoration.lineThrough : null,
-+                    color: isChecked ? AppColors.neutralGrey : AppColors.primaryText,
-+                  ),
-+                ),
-+              ),
-+            ],
-+          ),
-+        ),
-+      ),
-+    );
-+  }
-+
-+  Widget _buildStyledCard({required String title, required Widget child, Widget? headerAccessory}) {
-+    return Container(
-+      width: double.infinity,
-+      padding: const EdgeInsets.all(16.0),
-+      decoration: BoxDecoration(
-+        color: Colors.white,
-+        borderRadius: BorderRadius.circular(12),
-+        boxShadow: [
-+          BoxShadow(
-+            color: Colors.grey.withOpacity(0.1),
-+            spreadRadius: 1,
-+            blurRadius: 5,
-+            offset: const Offset(0, 2),
-+          ),
-+        ],
-+      ),
-+      child: Column(
-+        crossAxisAlignment: CrossAxisAlignment.start,
-+        children: [
-+          Row(
-+            mainAxisAlignment: MainAxisAlignment.spaceBetween,
-+            children: [
-+              Text(title, style: AppTextStyles.h2),
-+              if (headerAccessory != null) headerAccessory,
-+            ],
-+          ),
-+          const Divider(height: 32),
-+          child,
-+        ],
-+      ),
-+    );
-+  }
-+}
-\ No newline at end of file
-diff --git a/lib/features/recipe_finder/presentation/widgets/nutrition_card.dart b/lib/features/recipe_finder/presentation/widgets/nutrition_card.dart
-index e69de29..d5dda9e 100644
---- a/lib/features/recipe_finder/presentation/widgets/nutrition_card.dart
-+++ b/lib/features/recipe_finder/presentation/widgets/nutrition_card.dart
-@@ -0,0 +1,59 @@
-+// lib/features/recipe_finder/presentation/widgets/nutrition_card.dart
-+
-+import 'package:flutter/material.dart';
-+import 'package:neyese4/core/theme/app_text_styles.dart';
-+import 'package:neyese4/data/models/enriched_recipe_content.dart';
-+
-+class NutritionCard extends StatelessWidget {
-+  final EnrichedRecipeContent content;
-+  const NutritionCard({super.key, required this.content});
-+
-+  @override
-+  Widget build(BuildContext context) {
-+    return _buildStyledCard(
-+      title: 'Tahmini Besin Değerleri',
-+      child: Column(
-+        children: content.estimatedNutrition.entries.map((entry) {
-+          return Padding(
-+            padding: const EdgeInsets.symmetric(vertical: 4.0),
-+            child: Row(
-+              mainAxisAlignment: MainAxisAlignment.spaceBetween,
-+              children: [
-+                Text(entry.key, style: AppTextStyles.body),
-+                Text(entry.value, style: AppTextStyles.body.copyWith(fontWeight: FontWeight.bold)),
-+              ],
-+            ),
-+          );
-+        }).toList(),
-+      ),
-+    );
-+  }
-+
-+  // Ortak kart stili için yardımcı metot.
-+  Widget _buildStyledCard({required String title, required Widget child}) {
-+    return Container(
-+      width: double.infinity,
-+      padding: const EdgeInsets.all(16.0),
-+      decoration: BoxDecoration(
-+        color: Colors.white,
-+        borderRadius: BorderRadius.circular(12),
-+        boxShadow: [
-+          BoxShadow(
-+            color: Colors.grey.withOpacity(0.1),
-+            spreadRadius: 1,
-+            blurRadius: 5,
-+            offset: const Offset(0, 2),
-+          ),
-+        ],
-+      ),
-+      child: Column(
-+        crossAxisAlignment: CrossAxisAlignment.start,
-+        children: [
-+          Text(title, style: AppTextStyles.h2),
-+          const SizedBox(height: 16),
-+          child,
-+        ],
-+      ),
-+    );
-+  }
-+}
-\ No newline at end of file
-diff --git a/lib/features/recipe_finder/presentation/widgets/preparation_steps_card.dart b/lib/features/recipe_finder/presentation/widgets/preparation_steps_card.dart
-index e69de29..2eda7e0 100644
---- a/lib/features/recipe_finder/presentation/widgets/preparation_steps_card.dart
-+++ b/lib/features/recipe_finder/presentation/widgets/preparation_steps_card.dart
-@@ -0,0 +1,119 @@
-+// lib/features/recipe_finder/presentation/widgets/preparation_steps_card.dart
-+
-+import 'package:flutter/material.dart';
-+import 'package:neyese4/core/theme/app_colors.dart';
-+import 'package:neyese4/core/theme/app_text_styles.dart';
-+import 'package:neyese4/data/models/enriched_recipe_content.dart';
-+import 'package:neyese4/data/models/preparation_step.dart';
-+
-+class PreparationStepsCard extends StatelessWidget {
-+  final EnrichedRecipeContent content;
-+  const PreparationStepsCard({super.key, required this.content});
-+
-+  @override
-+  Widget build(BuildContext context) {
-+    return _buildStyledCard(
-+      title: 'Hazırlanışı',
-+      child: Column(
-+        children: content.preparationSteps.map((step) {
-+          // Her bir adım için _StepItem widget'ını oluşturuyoruz.
-+          // Listenin son elemanı değilse, altına bir ayırıcı (divider) ekliyoruz.
-+          final isLastItem = step == content.preparationSteps.last;
-+          return Column(
-+            children: [
-+              _StepItem(step: step),
-+              if (!isLastItem)
-+                const Divider(height: 32, thickness: 0.5)
-+            ],
-+          );
-+        }).toList(),
-+      ),
-+    );
-+  }
-+
-+  // Diğer kartlarımızla aynı stili kullanmak için yardımcı metot.
-+  Widget _buildStyledCard({required String title, required Widget child}) {
-+    return Container(
-+      width: double.infinity,
-+      padding: const EdgeInsets.all(16.0),
-+      decoration: BoxDecoration(
-+        color: Colors.white,
-+        borderRadius: BorderRadius.circular(12),
-+        boxShadow: [
-+          BoxShadow(
-+            color: Colors.grey.withOpacity(0.1),
-+            spreadRadius: 1,
-+            blurRadius: 5,
-+            offset: const Offset(0, 2),
-+          ),
-+        ],
-+      ),
-+      child: Column(
-+        crossAxisAlignment: CrossAxisAlignment.start,
-+        children: [
-+          Text(title, style: AppTextStyles.h2),
-+          const SizedBox(height: 16),
-+          child,
-+        ],
-+      ),
-+    );
-+  }
-+}
-+
-+// Tek bir hazırlık adımını gösteren widget.
-+class _StepItem extends StatelessWidget {
-+  final PreparationStep step;
-+  const _StepItem({required this.step});
-+
-+  @override
-+  Widget build(BuildContext context) {
-+    return Row(
-+      crossAxisAlignment: CrossAxisAlignment.start,
-+      children: [
-+        // Adım Numarası
-+        CircleAvatar(
-+          radius: 14,
-+          backgroundColor: AppColors.primaryAction,
-+          child: Text(
-+            '${step.stepNumber}',
-+            style: AppTextStyles.body.copyWith(
-+              color: Colors.white,
-+              fontWeight: FontWeight.bold,
-+            ),
-+          ),
-+        ),
-+        const SizedBox(width: 16),
-+        // Adım Açıklaması ve Görseli için Alan
-+        Expanded(
-+          child: Column(
-+            crossAxisAlignment: CrossAxisAlignment.start,
-+            children: [
-+              Text(
-+                step.description,
-+                style: AppTextStyles.body.copyWith(height: 1.5, fontSize: 17),
-+              ),
-+              const SizedBox(height: 16),
-+              // Gelecekte AI ile görsel üreteceğimiz alanın yer tutucusu.
-+              AspectRatio(
-+                aspectRatio: 16 / 9,
-+                child: Container(
-+                  decoration: BoxDecoration(
-+                    color: Colors.grey.shade200,
-+                    borderRadius: BorderRadius.circular(8),
-+                  ),
-+                  child: const Center(
-+                    child: Icon(
-+                      Icons.camera_alt_outlined,
-+                      color: AppColors.neutralGrey,
-+                      size: 32,
-+                    ),
-+                  ),
-+                ),
-+              ),
-+            ],
-+          ),
-+        ),
-+      ],
-+    );
-+  }
-+}
-\ No newline at end of file
-diff --git a/lib/features/recipe_finder/presentation/widgets/recipe_title_and_meta_card.dart b/lib/features/recipe_finder/presentation/widgets/recipe_title_and_meta_card.dart
-index e69de29..56c83f7 100644
---- a/lib/features/recipe_finder/presentation/widgets/recipe_title_and_meta_card.dart
-+++ b/lib/features/recipe_finder/presentation/widgets/recipe_title_and_meta_card.dart
-@@ -0,0 +1,44 @@
-+import 'package:flutter/material.dart';
-+import 'package:neyese4/core/theme/app_colors.dart';
-+import 'package:neyese4/core/theme/app_text_styles.dart';
-+import 'package:neyese4/data/models/enriched_recipe_content.dart';
-+
-+class RecipeTitleAndMetaCard extends StatelessWidget {
-+  final EnrichedRecipeContent content;
-+  const RecipeTitleAndMetaCard({super.key, required this.content});
-+
-+  @override
-+  Widget build(BuildContext context) {
-+    return Column(
-+      crossAxisAlignment: CrossAxisAlignment.start,
-+      children: [
-+        Text(content.title, style: AppTextStyles.h1),
-+        const SizedBox(height: 16),
-+        Row(
-+          children: [
-+            _buildInfoChip(
-+              icon: Icons.timer_outlined,
-+              label: '${content.readyInMinutes} dk',
-+            ),
-+            const SizedBox(width: 12),
-+            _buildInfoChip(
-+              icon: Icons.leaderboard_outlined,
-+              label: content.difficulty,
-+            ),
-+          ],
-+        ),
-+      ],
-+    );
-+  }
-+
-+  Widget _buildInfoChip({required IconData icon, required String label}) {
-+    return Chip(
-+      avatar: Icon(icon, color: AppColors.primaryAction, size: 20),
-+      label: Text(label),
-+      labelStyle: AppTextStyles.body.copyWith(color: AppColors.primaryText),
-+      backgroundColor: AppColors.primaryAction.withOpacity(0.1),
-+      side: BorderSide.none,
-+      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 6),
-+    );
-+  }
-+}
-\ No newline at end of file
-diff --git a/lib/features/recipe_finder/presentation/widgets/utensils_card.dart b/lib/features/recipe_finder/presentation/widgets/utensils_card.dart
-index e69de29..213b1ff 100644
---- a/lib/features/recipe_finder/presentation/widgets/utensils_card.dart
-+++ b/lib/features/recipe_finder/presentation/widgets/utensils_card.dart
-@@ -0,0 +1,52 @@
-+import 'package:flutter/material.dart';
-+import 'package:neyese4/core/theme/app_text_styles.dart';
-+import 'package:neyese4/data/models/enriched_recipe_content.dart';
-+
-+class UtensilsCard extends StatelessWidget {
-+  final EnrichedRecipeContent content;
-+  const UtensilsCard({super.key, required this.content});
-+
-+  @override
-+  Widget build(BuildContext context) {
-+    return _buildStyledCard(
-+      title: 'Mutfak Aletleri',
-+      child: Column(
-+        crossAxisAlignment: CrossAxisAlignment.start,
-+        children: content.requiredUtensils.map((utensil) {
-+          return Padding(
-+            padding: const EdgeInsets.only(bottom: 8.0),
-+            child: Text('• $utensil', style: AppTextStyles.body),
-+          );
-+        }).toList(),
-+      ),
-+    );
-+  }
-+
-+  // Ortak kart stilimizi oluşturmak için bir yardımcı metot
-+  Widget _buildStyledCard({required String title, required Widget child}) {
-+    return Container(
-+      width: double.infinity,
-+      padding: const EdgeInsets.all(16.0),
-+      decoration: BoxDecoration(
-+        color: Colors.white,
-+        borderRadius: BorderRadius.circular(12),
-+        boxShadow: [
-+          BoxShadow(
-+            color: Colors.grey.withOpacity(0.1),
-+            spreadRadius: 1,
-+            blurRadius: 5,
-+            offset: const Offset(0, 2),
-+          ),
-+        ],
-+      ),
-+      child: Column(
-+        crossAxisAlignment: CrossAxisAlignment.start,
-+        children: [
-+          Text(title, style: AppTextStyles.h2),
-+          const SizedBox(height: 16),
-+          child,
-+        ],
-+      ),
-+    );
-+  }
-+}
-\ No newline at end of file
-diff --git a/neyese_updates.patch b/neyese_updates.patch
-index 229a846..e062a5f 100644
---- a/neyese_updates.patch
-+++ b/neyese_updates.patch
-@@ -1,13 +0,0 @@
--diff --git a/lib/core/api/dio_client.dart b/lib/core/api/dio_client.dart
--index 67fe63b..94bae65 100644
----- a/lib/core/api/dio_client.dart
--+++ b/lib/core/api/dio_client.dart
--@@ -18,7 +18,7 @@ class DioClient {
-- 
--     // Anahtarın .env dosyasında bulunduğundan emin olalım.
--     if (apiKey == null) {
---      throw Exception("SPOONACULAR_API_KEY .env dosyasında bulunamadı!");
--+      throw Exception("SPOONACULAR_API_KEY .env dosyasında bulunamadıysa!");
--     }
-- 
--     // 3. _dio nesnesini burada, constructor içinde oluşturuyoruz.
-diff --git a/pubspec.lock b/pubspec.lock
-index 6d7ed5d..f4cd404 100644
---- a/pubspec.lock
-+++ b/pubspec.lock
-@@ -360,6 +360,14 @@ packages:
-       url: "https://pub.dev"
-     source: hosted
-     version: "4.1.2"
-+  intl:
-+    dependency: "direct main"
-+    description:
-+      name: intl
-+      sha256: "3df61194eb431efc39c4ceba583b95633a403f46c9fd341e550ce0bfa50e9aa5"
-+      url: "https://pub.dev"
-+    source: hosted
-+    version: "0.20.2"
-   io:
-     dependency: transitive
-     description:
-diff --git a/pubspec.yaml b/pubspec.yaml
-index e038115..5d4378b 100644
---- a/pubspec.yaml
-+++ b/pubspec.yaml
-@@ -44,6 +44,7 @@ dependencies:
-   google_generative_ai: ^0.4.7 #Yapay Zeka asistan için
-   cupertino_icons: ^1.0.6
-   flutter_dotenv: ^5.2.1
-+  intl: ^0.20.2
- 
- dev_dependencies:
-   flutter_test:
diff --git a/pubspec.lock b/pubspec.lock
index 559f4d5..cda4b0b 100644
--- a/pubspec.lock
+++ b/pubspec.lock
@@ -158,6 +158,14 @@ packages:
       url: "https://pub.dev"
     source: hosted
     version: "3.1.2"
+  cross_file:
+    dependency: transitive
+    description:
+      name: cross_file
+      sha256: "7caf6a750a0c04effbb52a676dce9a4a592e10ad35c34d6d2d0e4811160d5670"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.3.4+2"
   crypto:
     dependency: transitive
     description:
@@ -222,6 +230,38 @@ packages:
       url: "https://pub.dev"
     source: hosted
     version: "7.0.1"
+  file_selector_linux:
+    dependency: transitive
+    description:
+      name: file_selector_linux
+      sha256: "54cbbd957e1156d29548c7d9b9ec0c0ebb6de0a90452198683a7d23aed617a33"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.9.3+2"
+  file_selector_macos:
+    dependency: transitive
+    description:
+      name: file_selector_macos
+      sha256: "8c9250b2bd2d8d4268e39c82543bacbaca0fda7d29e0728c3c4bbb7c820fd711"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.9.4+3"
+  file_selector_platform_interface:
+    dependency: transitive
+    description:
+      name: file_selector_platform_interface
+      sha256: a3994c26f10378a039faa11de174d7b78eb8f79e4dd0af2a451410c1a5c3f66b
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.6.2"
+  file_selector_windows:
+    dependency: transitive
+    description:
+      name: file_selector_windows
+      sha256: "320fcfb6f33caa90f0b58380489fc5ac05d99ee94b61aa96ec2bff0ba81d3c2b"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.9.3+4"
   fixnum:
     dependency: transitive
     description:
@@ -243,6 +283,14 @@ packages:
       url: "https://pub.dev"
     source: hosted
     version: "3.0.2"
+  flutter_plugin_android_lifecycle:
+    dependency: transitive
+    description:
+      name: flutter_plugin_android_lifecycle
+      sha256: f948e346c12f8d5480d2825e03de228d0eb8c3a737e4cdaa122267b89c022b5e
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.0.28"
   flutter_riverpod:
     dependency: "direct main"
     description:
@@ -256,6 +304,11 @@ packages:
     description: flutter
     source: sdk
     version: "0.0.0"
+  flutter_web_plugins:
+    dependency: transitive
+    description: flutter
+    source: sdk
+    version: "0.0.0"
   freezed:
     dependency: "direct dev"
     description:
@@ -352,6 +405,70 @@ packages:
       url: "https://pub.dev"
     source: hosted
     version: "4.1.2"
+  image_picker:
+    dependency: "direct main"
+    description:
+      name: image_picker
+      sha256: "021834d9c0c3de46bf0fe40341fa07168407f694d9b2bb18d532dc1261867f7a"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.1.2"
+  image_picker_android:
+    dependency: transitive
+    description:
+      name: image_picker_android
+      sha256: "317a5d961cec5b34e777b9252393f2afbd23084aa6e60fcf601dcf6341b9ebeb"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.8.12+23"
+  image_picker_for_web:
+    dependency: transitive
+    description:
+      name: image_picker_for_web
+      sha256: "717eb042ab08c40767684327be06a5d8dbb341fe791d514e4b92c7bbe1b7bb83"
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.0.6"
+  image_picker_ios:
+    dependency: transitive
+    description:
+      name: image_picker_ios
+      sha256: "05da758e67bc7839e886b3959848aa6b44ff123ab4b28f67891008afe8ef9100"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.8.12+2"
+  image_picker_linux:
+    dependency: transitive
+    description:
+      name: image_picker_linux
+      sha256: "34a65f6740df08bbbeb0a1abd8e6d32107941fd4868f67a507b25601651022c9"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.2.1+2"
+  image_picker_macos:
+    dependency: transitive
+    description:
+      name: image_picker_macos
+      sha256: "1b90ebbd9dcf98fb6c1d01427e49a55bd96b5d67b8c67cf955d60a5de74207c1"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.2.1+2"
+  image_picker_platform_interface:
+    dependency: transitive
+    description:
+      name: image_picker_platform_interface
+      sha256: "886d57f0be73c4b140004e78b9f28a8914a09e50c2d816bdd0520051a71236a0"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.10.1"
+  image_picker_windows:
+    dependency: transitive
+    description:
+      name: image_picker_windows
+      sha256: "6ad07afc4eb1bc25f3a01084d28520496c4a3bb0cb13685435838167c9dcedeb"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.2.1+1"
   intl:
     dependency: "direct main"
     description:
@@ -472,6 +589,14 @@ packages:
       url: "https://pub.dev"
     source: hosted
     version: "2.0.0"
+  mobile_scanner:
+    dependency: "direct main"
+    description:
+      name: mobile_scanner
+      sha256: "54005bdea7052d792d35b4fef0f84ec5ddc3a844b250ecd48dc192fb9b4ebc95"
+      url: "https://pub.dev"
+    source: hosted
+    version: "7.0.1"
   package_config:
     dependency: transitive
     description:
@@ -685,6 +810,14 @@ packages:
       url: "https://pub.dev"
     source: hosted
     version: "0.7.4"
+  timer_count_down:
+    dependency: "direct main"
+    description:
+      name: timer_count_down
+      sha256: d025d408c2654e497ca0bd4bde014bd7509d4c6397af4ed23a0f9b692bbcf337
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.2.2"
   timing:
     dependency: transitive
     description:
@@ -767,4 +900,4 @@ packages:
     version: "3.1.3"
 sdks:
   dart: ">=3.8.1 <4.0.0"
-  flutter: ">=3.27.0"
+  flutter: ">=3.29.0"
diff --git a/pubspec.yaml b/pubspec.yaml
index 0693af7..7f38674 100644
--- a/pubspec.yaml
+++ b/pubspec.yaml
@@ -44,6 +44,9 @@ dependencies:
   google_generative_ai: ^0.4.7 #Yapay Zeka asistan için
   cupertino_icons: ^1.0.6
   intl: ^0.20.2
+  timer_count_down: ^2.2.2
+  mobile_scanner: ^7.0.1
+  image_picker: ^1.1.2
 
 dev_dependencies:
   flutter_test:
diff --git a/windows/flutter/generated_plugin_registrant.cc b/windows/flutter/generated_plugin_registrant.cc
index 8b6d468..77ab7a0 100644
--- a/windows/flutter/generated_plugin_registrant.cc
+++ b/windows/flutter/generated_plugin_registrant.cc
@@ -6,6 +6,9 @@
 
 #include "generated_plugin_registrant.h"
 
+#include <file_selector_windows/file_selector_windows.h>
 
 void RegisterPlugins(flutter::PluginRegistry* registry) {
+  FileSelectorWindowsRegisterWithRegistrar(
+      registry->GetRegistrarForPlugin("FileSelectorWindows"));
 }
diff --git a/windows/flutter/generated_plugins.cmake b/windows/flutter/generated_plugins.cmake
index b93c4c3..a423a02 100644
--- a/windows/flutter/generated_plugins.cmake
+++ b/windows/flutter/generated_plugins.cmake
@@ -3,6 +3,7 @@
 #
 
 list(APPEND FLUTTER_PLUGIN_LIST
+  file_selector_windows
 )
 
 list(APPEND FLUTTER_FFI_PLUGIN_LIST
